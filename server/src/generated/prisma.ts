import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Article implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  body: String!
  type: Arcticletype
  author(where: UserWhereInput): User!
}

type Connect implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to(where: UserWhereInput): User!
  from(where: UserWhereInput): User!
  accepted: Boolean!
}

type Country implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  shortName: String!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Department implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  institution(where: InstitutionsWhereInput): Institutions!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Discussion implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  content: String!
  tags: [String!]
  favourites(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  author(where: UserWhereInput): User!
  private: Boolean!
  opinions(where: OpinionsWhereInput, orderBy: OpinionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinions!]
}

type File implements Node {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type Forum implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  author(where: UserWhereInput): User!
  private: Boolean!
}

type Institutions implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  type: InstitutionType!
  country(where: CountryWhereInput): Country!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Interest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  file(where: FileWhereInput): File!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Opinions implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  author(where: UserWhereInput): User!
  discussion(where: DiscussionWhereInput): Discussion!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  country(where: CountryWhereInput): Country
  institution(where: InstitutionsWhereInput): Institutions
  department(where: DepartmentWhereInput): Department
  interest(where: InterestWhereInput): Interest
  favourites(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion!]
  myDiscussions(where: DiscussionWhereInput): Discussion
  connectTo(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect!]
  ConectFrom(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect!]
  type: String
  userType: String
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article!]
  opinions(where: OpinionsWhereInput, orderBy: OpinionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinions!]
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
}


#
# Other Types
#

type AggregateArticle {
  count: Int!
}

type AggregateConnect {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateDiscussion {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateForum {
  count: Int!
}

type AggregateInstitutions {
  count: Int!
}

type AggregateInterest {
  count: Int!
}

type AggregateOpinions {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum Arcticletype {
  External
  Internal
}

"""
A connection to a list of items.
"""
type ArticleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateInput {
  isPublished: Boolean
  title: String!
  body: String!
  type: Arcticletype
  author: UserCreateOneWithoutArticlesInput!
}

input ArticleCreateManyWithoutAuthorInput {
  create: [ArticleCreateWithoutAuthorInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  body: String!
  type: Arcticletype
}

"""
An edge in a connection.
"""
type ArticleEdge {
  """
  The item at the end of the edge.
  """
  node: Article!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  type_ASC
  type_DESC
}

type ArticlePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  body: String!
  type: Arcticletype
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArticleSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArticleSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
}

input ArticleUpdateInput {
  isPublished: Boolean
  title: String
  body: String
  type: Arcticletype
  author: UserUpdateOneWithoutArticlesInput
}

input ArticleUpdateManyWithoutAuthorInput {
  create: [ArticleCreateWithoutAuthorInput!]
  connect: [ArticleWhereUniqueInput!]
  disconnect: [ArticleWhereUniqueInput!]
  delete: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithoutAuthorInput!]
  upsert: [ArticleUpsertWithoutAuthorInput!]
}

input ArticleUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  body: String
  type: Arcticletype
}

input ArticleUpdateWithoutAuthorInput {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateWithoutAuthorDataInput!
}

input ArticleUpsertWithoutAuthorInput {
  where: ArticleWhereUniqueInput!
  update: ArticleUpdateWithoutAuthorDataInput!
  create: ArticleCreateWithoutAuthorInput!
}

input ArticleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArticleWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArticleWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  body: String
  """
  All values that are not equal to given value.
  """
  body_not: String
  """
  All values that are contained in given list.
  """
  body_in: [String!]
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
  """
  All values less than the given value.
  """
  body_lt: String
  """
  All values less than or equal the given value.
  """
  body_lte: String
  """
  All values greater than the given value.
  """
  body_gt: String
  """
  All values greater than or equal the given value.
  """
  body_gte: String
  """
  All values containing the given string.
  """
  body_contains: String
  """
  All values not containing the given string.
  """
  body_not_contains: String
  """
  All values starting with the given string.
  """
  body_starts_with: String
  """
  All values not starting with the given string.
  """
  body_not_starts_with: String
  """
  All values ending with the given string.
  """
  body_ends_with: String
  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  type: Arcticletype
  """
  All values that are not equal to given value.
  """
  type_not: Arcticletype
  """
  All values that are contained in given list.
  """
  type_in: [Arcticletype!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [Arcticletype!]
  author: UserWhereInput
}

input ArticleWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ConnectConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ConnectEdge]!
  aggregate: AggregateConnect!
}

input ConnectCreateInput {
  accepted: Boolean
  to: UserCreateOneWithoutConnectToInput!
  from: UserCreateOneWithoutConectFromInput!
}

input ConnectCreateManyWithoutFromInput {
  create: [ConnectCreateWithoutFromInput!]
  connect: [ConnectWhereUniqueInput!]
}

input ConnectCreateManyWithoutToInput {
  create: [ConnectCreateWithoutToInput!]
  connect: [ConnectWhereUniqueInput!]
}

input ConnectCreateWithoutFromInput {
  accepted: Boolean
  to: UserCreateOneWithoutConnectToInput!
}

input ConnectCreateWithoutToInput {
  accepted: Boolean
  from: UserCreateOneWithoutConectFromInput!
}

"""
An edge in a connection.
"""
type ConnectEdge {
  """
  The item at the end of the edge.
  """
  node: Connect!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ConnectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  accepted_ASC
  accepted_DESC
}

type ConnectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  accepted: Boolean!
}

type ConnectSubscriptionPayload {
  mutation: MutationType!
  node: Connect
  updatedFields: [String!]
  previousValues: ConnectPreviousValues
}

input ConnectSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConnectSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConnectSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConnectWhereInput
}

input ConnectUpdateInput {
  accepted: Boolean
  to: UserUpdateOneWithoutConnectToInput
  from: UserUpdateOneWithoutConectFromInput
}

input ConnectUpdateManyWithoutFromInput {
  create: [ConnectCreateWithoutFromInput!]
  connect: [ConnectWhereUniqueInput!]
  disconnect: [ConnectWhereUniqueInput!]
  delete: [ConnectWhereUniqueInput!]
  update: [ConnectUpdateWithoutFromInput!]
  upsert: [ConnectUpsertWithoutFromInput!]
}

input ConnectUpdateManyWithoutToInput {
  create: [ConnectCreateWithoutToInput!]
  connect: [ConnectWhereUniqueInput!]
  disconnect: [ConnectWhereUniqueInput!]
  delete: [ConnectWhereUniqueInput!]
  update: [ConnectUpdateWithoutToInput!]
  upsert: [ConnectUpsertWithoutToInput!]
}

input ConnectUpdateWithoutFromDataInput {
  accepted: Boolean
  to: UserUpdateOneWithoutConnectToInput
}

input ConnectUpdateWithoutFromInput {
  where: ConnectWhereUniqueInput!
  data: ConnectUpdateWithoutFromDataInput!
}

input ConnectUpdateWithoutToDataInput {
  accepted: Boolean
  from: UserUpdateOneWithoutConectFromInput
}

input ConnectUpdateWithoutToInput {
  where: ConnectWhereUniqueInput!
  data: ConnectUpdateWithoutToDataInput!
}

input ConnectUpsertWithoutFromInput {
  where: ConnectWhereUniqueInput!
  update: ConnectUpdateWithoutFromDataInput!
  create: ConnectCreateWithoutFromInput!
}

input ConnectUpsertWithoutToInput {
  where: ConnectWhereUniqueInput!
  update: ConnectUpdateWithoutToDataInput!
  create: ConnectCreateWithoutToInput!
}

input ConnectWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConnectWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConnectWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  accepted: Boolean
  """
  All values that are not equal to given value.
  """
  accepted_not: Boolean
  to: UserWhereInput
  from: UserWhereInput
}

input ConnectWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type CountryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  shortName: String!
  name: String!
  users: UserCreateManyWithoutCountryInput
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

input CountryCreateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutUsersInput {
  shortName: String!
  name: String!
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  shortName_ASC
  shortName_DESC
  name_ASC
  name_DESC
}

type CountryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  shortName: String!
  name: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountrySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountrySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateDataInput {
  shortName: String
  name: String
  users: UserUpdateManyWithoutCountryInput
}

input CountryUpdateInput {
  shortName: String
  name: String
  users: UserUpdateManyWithoutCountryInput
}

input CountryUpdateNestedInput {
  where: CountryWhereUniqueInput!
  data: CountryUpdateDataInput!
}

input CountryUpdateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: CountryWhereUniqueInput
  delete: CountryWhereUniqueInput
  update: CountryUpdateNestedInput
  upsert: CountryUpsertNestedInput
}

input CountryUpdateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
  disconnect: CountryWhereUniqueInput
  delete: CountryWhereUniqueInput
  update: CountryUpdateWithoutUsersInput
  upsert: CountryUpsertWithoutUsersInput
}

input CountryUpdateWithoutUsersDataInput {
  shortName: String
  name: String
}

input CountryUpdateWithoutUsersInput {
  where: CountryWhereUniqueInput!
  data: CountryUpdateWithoutUsersDataInput!
}

input CountryUpsertNestedInput {
  where: CountryWhereUniqueInput!
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryUpsertWithoutUsersInput {
  where: CountryWhereUniqueInput!
  update: CountryUpdateWithoutUsersDataInput!
  create: CountryCreateWithoutUsersInput!
}

input CountryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountryWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountryWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  shortName: String
  """
  All values that are not equal to given value.
  """
  shortName_not: String
  """
  All values that are contained in given list.
  """
  shortName_in: [String!]
  """
  All values that are not contained in given list.
  """
  shortName_not_in: [String!]
  """
  All values less than the given value.
  """
  shortName_lt: String
  """
  All values less than or equal the given value.
  """
  shortName_lte: String
  """
  All values greater than the given value.
  """
  shortName_gt: String
  """
  All values greater than or equal the given value.
  """
  shortName_gte: String
  """
  All values containing the given string.
  """
  shortName_contains: String
  """
  All values not containing the given string.
  """
  shortName_not_contains: String
  """
  All values starting with the given string.
  """
  shortName_starts_with: String
  """
  All values not starting with the given string.
  """
  shortName_not_starts_with: String
  """
  All values ending with the given string.
  """
  shortName_ends_with: String
  """
  All values not ending with the given string.
  """
  shortName_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input CountryWhereUniqueInput {
  id: ID
  shortName: String
  name: String
}

scalar DateTime

"""
A connection to a list of items.
"""
type DepartmentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  name: String!
  institution: InstitutionsCreateOneInput!
  users: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutUsersInput {
  create: DepartmentCreateWithoutUsersInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutUsersInput {
  name: String!
  institution: InstitutionsCreateOneInput!
}

"""
An edge in a connection.
"""
type DepartmentEdge {
  """
  The item at the end of the edge.
  """
  node: Department!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DepartmentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DepartmentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
}

input DepartmentUpdateInput {
  name: String
  institution: InstitutionsUpdateOneInput
  users: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateOneWithoutUsersInput {
  create: DepartmentCreateWithoutUsersInput
  connect: DepartmentWhereUniqueInput
  disconnect: DepartmentWhereUniqueInput
  delete: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutUsersInput
  upsert: DepartmentUpsertWithoutUsersInput
}

input DepartmentUpdateWithoutUsersDataInput {
  name: String
  institution: InstitutionsUpdateOneInput
}

input DepartmentUpdateWithoutUsersInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutUsersDataInput!
}

input DepartmentUpsertWithoutUsersInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutUsersDataInput!
  create: DepartmentCreateWithoutUsersInput!
}

input DepartmentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DepartmentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DepartmentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  institution: InstitutionsWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type DiscussionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DiscussionEdge]!
  aggregate: AggregateDiscussion!
}

input DiscussionCreateInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  favourites: UserCreateManyWithoutFavouritesInput
  author: UserCreateOneWithoutMyDiscussionsInput!
  opinions: OpinionsCreateManyWithoutDiscussionInput
}

input DiscussionCreateManyWithoutFavouritesInput {
  create: [DiscussionCreateWithoutFavouritesInput!]
  connect: [DiscussionWhereUniqueInput!]
}

input DiscussionCreateOneWithoutAuthorInput {
  create: DiscussionCreateWithoutAuthorInput
  connect: DiscussionWhereUniqueInput
}

input DiscussionCreateOneWithoutOpinionsInput {
  create: DiscussionCreateWithoutOpinionsInput
  connect: DiscussionWhereUniqueInput
}

input DiscussionCreatetagsInput {
  set: [String!]
}

input DiscussionCreateWithoutAuthorInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  favourites: UserCreateManyWithoutFavouritesInput
  opinions: OpinionsCreateManyWithoutDiscussionInput
}

input DiscussionCreateWithoutFavouritesInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  author: UserCreateOneWithoutMyDiscussionsInput!
  opinions: OpinionsCreateManyWithoutDiscussionInput
}

input DiscussionCreateWithoutOpinionsInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  favourites: UserCreateManyWithoutFavouritesInput
  author: UserCreateOneWithoutMyDiscussionsInput!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  The item at the end of the edge.
  """
  node: Discussion!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DiscussionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  private_ASC
  private_DESC
}

type DiscussionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  content: String!
  tags: [String!]
  private: Boolean!
}

type DiscussionSubscriptionPayload {
  mutation: MutationType!
  node: Discussion
  updatedFields: [String!]
  previousValues: DiscussionPreviousValues
}

input DiscussionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DiscussionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DiscussionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscussionWhereInput
}

input DiscussionUpdateInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  favourites: UserUpdateManyWithoutFavouritesInput
  author: UserUpdateOneWithoutMyDiscussionsInput
  opinions: OpinionsUpdateManyWithoutDiscussionInput
}

input DiscussionUpdateManyWithoutFavouritesInput {
  create: [DiscussionCreateWithoutFavouritesInput!]
  connect: [DiscussionWhereUniqueInput!]
  disconnect: [DiscussionWhereUniqueInput!]
  delete: [DiscussionWhereUniqueInput!]
  update: [DiscussionUpdateWithoutFavouritesInput!]
  upsert: [DiscussionUpsertWithoutFavouritesInput!]
}

input DiscussionUpdateOneWithoutAuthorInput {
  create: DiscussionCreateWithoutAuthorInput
  connect: DiscussionWhereUniqueInput
  disconnect: DiscussionWhereUniqueInput
  delete: DiscussionWhereUniqueInput
  update: DiscussionUpdateWithoutAuthorInput
  upsert: DiscussionUpsertWithoutAuthorInput
}

input DiscussionUpdateOneWithoutOpinionsInput {
  create: DiscussionCreateWithoutOpinionsInput
  connect: DiscussionWhereUniqueInput
  disconnect: DiscussionWhereUniqueInput
  delete: DiscussionWhereUniqueInput
  update: DiscussionUpdateWithoutOpinionsInput
  upsert: DiscussionUpsertWithoutOpinionsInput
}

input DiscussionUpdatetagsInput {
  set: [String!]
}

input DiscussionUpdateWithoutAuthorDataInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  favourites: UserUpdateManyWithoutFavouritesInput
  opinions: OpinionsUpdateManyWithoutDiscussionInput
}

input DiscussionUpdateWithoutAuthorInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutAuthorDataInput!
}

input DiscussionUpdateWithoutFavouritesDataInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  author: UserUpdateOneWithoutMyDiscussionsInput
  opinions: OpinionsUpdateManyWithoutDiscussionInput
}

input DiscussionUpdateWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutFavouritesDataInput!
}

input DiscussionUpdateWithoutOpinionsDataInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  favourites: UserUpdateManyWithoutFavouritesInput
  author: UserUpdateOneWithoutMyDiscussionsInput
}

input DiscussionUpdateWithoutOpinionsInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutOpinionsDataInput!
}

input DiscussionUpsertWithoutAuthorInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutAuthorDataInput!
  create: DiscussionCreateWithoutAuthorInput!
}

input DiscussionUpsertWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutFavouritesDataInput!
  create: DiscussionCreateWithoutFavouritesInput!
}

input DiscussionUpsertWithoutOpinionsInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutOpinionsDataInput!
  create: DiscussionCreateWithoutOpinionsInput!
}

input DiscussionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DiscussionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DiscussionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  slug: String
  """
  All values that are not equal to given value.
  """
  slug_not: String
  """
  All values that are contained in given list.
  """
  slug_in: [String!]
  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]
  """
  All values less than the given value.
  """
  slug_lt: String
  """
  All values less than or equal the given value.
  """
  slug_lte: String
  """
  All values greater than the given value.
  """
  slug_gt: String
  """
  All values greater than or equal the given value.
  """
  slug_gte: String
  """
  All values containing the given string.
  """
  slug_contains: String
  """
  All values not containing the given string.
  """
  slug_not_contains: String
  """
  All values starting with the given string.
  """
  slug_starts_with: String
  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String
  """
  All values ending with the given string.
  """
  slug_ends_with: String
  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  private: Boolean
  """
  All values that are not equal to given value.
  """
  private_not: Boolean
  favourites_every: UserWhereInput
  favourites_some: UserWhereInput
  favourites_none: UserWhereInput
  author: UserWhereInput
  opinions_every: OpinionsWhereInput
  opinions_some: OpinionsWhereInput
  opinions_none: OpinionsWhereInput
}

input DiscussionWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  url: String!
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
}

input FileUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
}

input FileUpdateNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: FileWhereUniqueInput
  delete: FileWhereUniqueInput
  update: FileUpdateNestedInput
  upsert: FileUpsertNestedInput
}

input FileUpsertNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  size: Int
  """
  All values that are not equal to given value.
  """
  size_not: Int
  """
  All values that are contained in given list.
  """
  size_in: [Int!]
  """
  All values that are not contained in given list.
  """
  size_not_in: [Int!]
  """
  All values less than the given value.
  """
  size_lt: Int
  """
  All values less than or equal the given value.
  """
  size_lte: Int
  """
  All values greater than the given value.
  """
  size_gt: Int
  """
  All values greater than or equal the given value.
  """
  size_gte: Int
  secret: String
  """
  All values that are not equal to given value.
  """
  secret_not: String
  """
  All values that are contained in given list.
  """
  secret_in: [String!]
  """
  All values that are not contained in given list.
  """
  secret_not_in: [String!]
  """
  All values less than the given value.
  """
  secret_lt: String
  """
  All values less than or equal the given value.
  """
  secret_lte: String
  """
  All values greater than the given value.
  """
  secret_gt: String
  """
  All values greater than or equal the given value.
  """
  secret_gte: String
  """
  All values containing the given string.
  """
  secret_contains: String
  """
  All values not containing the given string.
  """
  secret_not_contains: String
  """
  All values starting with the given string.
  """
  secret_starts_with: String
  """
  All values not starting with the given string.
  """
  secret_not_starts_with: String
  """
  All values ending with the given string.
  """
  secret_ends_with: String
  """
  All values not ending with the given string.
  """
  secret_not_ends_with: String
  contentType: String
  """
  All values that are not equal to given value.
  """
  contentType_not: String
  """
  All values that are contained in given list.
  """
  contentType_in: [String!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [String!]
  """
  All values less than the given value.
  """
  contentType_lt: String
  """
  All values less than or equal the given value.
  """
  contentType_lte: String
  """
  All values greater than the given value.
  """
  contentType_gt: String
  """
  All values greater than or equal the given value.
  """
  contentType_gte: String
  """
  All values containing the given string.
  """
  contentType_contains: String
  """
  All values not containing the given string.
  """
  contentType_not_contains: String
  """
  All values starting with the given string.
  """
  contentType_starts_with: String
  """
  All values not starting with the given string.
  """
  contentType_not_starts_with: String
  """
  All values ending with the given string.
  """
  contentType_ends_with: String
  """
  All values not ending with the given string.
  """
  contentType_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

"""
A connection to a list of items.
"""
type ForumConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ForumEdge]!
  aggregate: AggregateForum!
}

input ForumCreateInput {
  title: String!
  slug: String
  private: Boolean
  author: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ForumEdge {
  """
  The item at the end of the edge.
  """
  node: Forum!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ForumOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  private_ASC
  private_DESC
}

type ForumPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  private: Boolean!
}

type ForumSubscriptionPayload {
  mutation: MutationType!
  node: Forum
  updatedFields: [String!]
  previousValues: ForumPreviousValues
}

input ForumSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ForumSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ForumSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ForumWhereInput
}

input ForumUpdateInput {
  title: String
  slug: String
  private: Boolean
  author: UserUpdateOneInput
}

input ForumWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ForumWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ForumWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  slug: String
  """
  All values that are not equal to given value.
  """
  slug_not: String
  """
  All values that are contained in given list.
  """
  slug_in: [String!]
  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]
  """
  All values less than the given value.
  """
  slug_lt: String
  """
  All values less than or equal the given value.
  """
  slug_lte: String
  """
  All values greater than the given value.
  """
  slug_gt: String
  """
  All values greater than or equal the given value.
  """
  slug_gte: String
  """
  All values containing the given string.
  """
  slug_contains: String
  """
  All values not containing the given string.
  """
  slug_not_contains: String
  """
  All values starting with the given string.
  """
  slug_starts_with: String
  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String
  """
  All values ending with the given string.
  """
  slug_ends_with: String
  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  private: Boolean
  """
  All values that are not equal to given value.
  """
  private_not: Boolean
  author: UserWhereInput
}

input ForumWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type InstitutionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [InstitutionsEdge]!
  aggregate: AggregateInstitutions!
}

input InstitutionsCreateInput {
  title: String!
  type: InstitutionType!
  country: CountryCreateOneInput!
  users: UserCreateManyWithoutInstitutionInput
}

input InstitutionsCreateOneInput {
  create: InstitutionsCreateInput
  connect: InstitutionsWhereUniqueInput
}

input InstitutionsCreateOneWithoutUsersInput {
  create: InstitutionsCreateWithoutUsersInput
  connect: InstitutionsWhereUniqueInput
}

input InstitutionsCreateWithoutUsersInput {
  title: String!
  type: InstitutionType!
  country: CountryCreateOneInput!
}

"""
An edge in a connection.
"""
type InstitutionsEdge {
  """
  The item at the end of the edge.
  """
  node: Institutions!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum InstitutionsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
}

type InstitutionsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  type: InstitutionType!
}

type InstitutionsSubscriptionPayload {
  mutation: MutationType!
  node: Institutions
  updatedFields: [String!]
  previousValues: InstitutionsPreviousValues
}

input InstitutionsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InstitutionsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InstitutionsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstitutionsWhereInput
}

input InstitutionsUpdateDataInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneInput
  users: UserUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneInput
  users: UserUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateNestedInput {
  where: InstitutionsWhereUniqueInput!
  data: InstitutionsUpdateDataInput!
}

input InstitutionsUpdateOneInput {
  create: InstitutionsCreateInput
  connect: InstitutionsWhereUniqueInput
  disconnect: InstitutionsWhereUniqueInput
  delete: InstitutionsWhereUniqueInput
  update: InstitutionsUpdateNestedInput
  upsert: InstitutionsUpsertNestedInput
}

input InstitutionsUpdateOneWithoutUsersInput {
  create: InstitutionsCreateWithoutUsersInput
  connect: InstitutionsWhereUniqueInput
  disconnect: InstitutionsWhereUniqueInput
  delete: InstitutionsWhereUniqueInput
  update: InstitutionsUpdateWithoutUsersInput
  upsert: InstitutionsUpsertWithoutUsersInput
}

input InstitutionsUpdateWithoutUsersDataInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneInput
}

input InstitutionsUpdateWithoutUsersInput {
  where: InstitutionsWhereUniqueInput!
  data: InstitutionsUpdateWithoutUsersDataInput!
}

input InstitutionsUpsertNestedInput {
  where: InstitutionsWhereUniqueInput!
  update: InstitutionsUpdateDataInput!
  create: InstitutionsCreateInput!
}

input InstitutionsUpsertWithoutUsersInput {
  where: InstitutionsWhereUniqueInput!
  update: InstitutionsUpdateWithoutUsersDataInput!
  create: InstitutionsCreateWithoutUsersInput!
}

input InstitutionsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InstitutionsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InstitutionsWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  type: InstitutionType
  """
  All values that are not equal to given value.
  """
  type_not: InstitutionType
  """
  All values that are contained in given list.
  """
  type_in: [InstitutionType!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [InstitutionType!]
  country: CountryWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input InstitutionsWhereUniqueInput {
  id: ID
}

enum InstitutionType {
  University
  College
}

"""
A connection to a list of items.
"""
type InterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [InterestEdge]!
  aggregate: AggregateInterest!
}

input InterestCreateInput {
  name: String!
  file: FileCreateOneInput!
  users: UserCreateManyWithoutInterestInput
}

input InterestCreateOneWithoutUsersInput {
  create: InterestCreateWithoutUsersInput
  connect: InterestWhereUniqueInput
}

input InterestCreateWithoutUsersInput {
  name: String!
  file: FileCreateOneInput!
}

"""
An edge in a connection.
"""
type InterestEdge {
  """
  The item at the end of the edge.
  """
  node: Interest!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum InterestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type InterestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type InterestSubscriptionPayload {
  mutation: MutationType!
  node: Interest
  updatedFields: [String!]
  previousValues: InterestPreviousValues
}

input InterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InterestSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterestWhereInput
}

input InterestUpdateInput {
  name: String
  file: FileUpdateOneInput
  users: UserUpdateManyWithoutInterestInput
}

input InterestUpdateOneWithoutUsersInput {
  create: InterestCreateWithoutUsersInput
  connect: InterestWhereUniqueInput
  disconnect: InterestWhereUniqueInput
  delete: InterestWhereUniqueInput
  update: InterestUpdateWithoutUsersInput
  upsert: InterestUpsertWithoutUsersInput
}

input InterestUpdateWithoutUsersDataInput {
  name: String
  file: FileUpdateOneInput
}

input InterestUpdateWithoutUsersInput {
  where: InterestWhereUniqueInput!
  data: InterestUpdateWithoutUsersDataInput!
}

input InterestUpsertWithoutUsersInput {
  where: InterestWhereUniqueInput!
  update: InterestUpdateWithoutUsersDataInput!
  create: InterestCreateWithoutUsersInput!
}

input InterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InterestWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  file: FileWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input InterestWhereUniqueInput {
  id: ID
}

"""
The 'Long' scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFile(data: FileCreateInput!): File!
  createPost(data: PostCreateInput!): Post!
  createArticle(data: ArticleCreateInput!): Article!
  createCountry(data: CountryCreateInput!): Country!
  createInstitutions(data: InstitutionsCreateInput!): Institutions!
  createDepartment(data: DepartmentCreateInput!): Department!
  createInterest(data: InterestCreateInput!): Interest!
  createUser(data: UserCreateInput!): User!
  createConnect(data: ConnectCreateInput!): Connect!
  createForum(data: ForumCreateInput!): Forum!
  createDiscussion(data: DiscussionCreateInput!): Discussion!
  createOpinions(data: OpinionsCreateInput!): Opinions!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateInstitutions(data: InstitutionsUpdateInput!, where: InstitutionsWhereUniqueInput!): Institutions
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateInterest(data: InterestUpdateInput!, where: InterestWhereUniqueInput!): Interest
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateConnect(data: ConnectUpdateInput!, where: ConnectWhereUniqueInput!): Connect
  updateForum(data: ForumUpdateInput!, where: ForumWhereUniqueInput!): Forum
  updateDiscussion(data: DiscussionUpdateInput!, where: DiscussionWhereUniqueInput!): Discussion
  updateOpinions(data: OpinionsUpdateInput!, where: OpinionsWhereUniqueInput!): Opinions
  deleteFile(where: FileWhereUniqueInput!): File
  deletePost(where: PostWhereUniqueInput!): Post
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteInstitutions(where: InstitutionsWhereUniqueInput!): Institutions
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteInterest(where: InterestWhereUniqueInput!): Interest
  deleteUser(where: UserWhereUniqueInput!): User
  deleteConnect(where: ConnectWhereUniqueInput!): Connect
  deleteForum(where: ForumWhereUniqueInput!): Forum
  deleteDiscussion(where: DiscussionWhereUniqueInput!): Discussion
  deleteOpinions(where: OpinionsWhereUniqueInput!): Opinions
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertInstitutions(where: InstitutionsWhereUniqueInput!, create: InstitutionsCreateInput!, update: InstitutionsUpdateInput!): Institutions!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  upsertInterest(where: InterestWhereUniqueInput!, create: InterestCreateInput!, update: InterestUpdateInput!): Interest!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertConnect(where: ConnectWhereUniqueInput!, create: ConnectCreateInput!, update: ConnectUpdateInput!): Connect!
  upsertForum(where: ForumWhereUniqueInput!, create: ForumCreateInput!, update: ForumUpdateInput!): Forum!
  upsertDiscussion(where: DiscussionWhereUniqueInput!, create: DiscussionCreateInput!, update: DiscussionUpdateInput!): Discussion!
  upsertOpinions(where: OpinionsWhereUniqueInput!, create: OpinionsCreateInput!, update: OpinionsUpdateInput!): Opinions!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyArticles(data: ArticleUpdateInput!, where: ArticleWhereInput!): BatchPayload!
  updateManyCountries(data: CountryUpdateInput!, where: CountryWhereInput!): BatchPayload!
  updateManyInstitutionses(data: InstitutionsUpdateInput!, where: InstitutionsWhereInput!): BatchPayload!
  updateManyDepartments(data: DepartmentUpdateInput!, where: DepartmentWhereInput!): BatchPayload!
  updateManyInterests(data: InterestUpdateInput!, where: InterestWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyConnects(data: ConnectUpdateInput!, where: ConnectWhereInput!): BatchPayload!
  updateManyForums(data: ForumUpdateInput!, where: ForumWhereInput!): BatchPayload!
  updateManyDiscussions(data: DiscussionUpdateInput!, where: DiscussionWhereInput!): BatchPayload!
  updateManyOpinionses(data: OpinionsUpdateInput!, where: OpinionsWhereInput!): BatchPayload!
  deleteManyFiles(where: FileWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyArticles(where: ArticleWhereInput!): BatchPayload!
  deleteManyCountries(where: CountryWhereInput!): BatchPayload!
  deleteManyInstitutionses(where: InstitutionsWhereInput!): BatchPayload!
  deleteManyDepartments(where: DepartmentWhereInput!): BatchPayload!
  deleteManyInterests(where: InterestWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyConnects(where: ConnectWhereInput!): BatchPayload!
  deleteManyForums(where: ForumWhereInput!): BatchPayload!
  deleteManyDiscussions(where: DiscussionWhereInput!): BatchPayload!
  deleteManyOpinionses(where: OpinionsWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type OpinionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OpinionsEdge]!
  aggregate: AggregateOpinions!
}

input OpinionsCreateInput {
  content: String!
  author: UserCreateOneWithoutOpinionsInput!
  discussion: DiscussionCreateOneWithoutOpinionsInput!
}

input OpinionsCreateManyWithoutAuthorInput {
  create: [OpinionsCreateWithoutAuthorInput!]
  connect: [OpinionsWhereUniqueInput!]
}

input OpinionsCreateManyWithoutDiscussionInput {
  create: [OpinionsCreateWithoutDiscussionInput!]
  connect: [OpinionsWhereUniqueInput!]
}

input OpinionsCreateWithoutAuthorInput {
  content: String!
  discussion: DiscussionCreateOneWithoutOpinionsInput!
}

input OpinionsCreateWithoutDiscussionInput {
  content: String!
  author: UserCreateOneWithoutOpinionsInput!
}

"""
An edge in a connection.
"""
type OpinionsEdge {
  """
  The item at the end of the edge.
  """
  node: Opinions!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OpinionsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
}

type OpinionsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

type OpinionsSubscriptionPayload {
  mutation: MutationType!
  node: Opinions
  updatedFields: [String!]
  previousValues: OpinionsPreviousValues
}

input OpinionsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OpinionsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OpinionsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OpinionsWhereInput
}

input OpinionsUpdateInput {
  content: String
  author: UserUpdateOneWithoutOpinionsInput
  discussion: DiscussionUpdateOneWithoutOpinionsInput
}

input OpinionsUpdateManyWithoutAuthorInput {
  create: [OpinionsCreateWithoutAuthorInput!]
  connect: [OpinionsWhereUniqueInput!]
  disconnect: [OpinionsWhereUniqueInput!]
  delete: [OpinionsWhereUniqueInput!]
  update: [OpinionsUpdateWithoutAuthorInput!]
  upsert: [OpinionsUpsertWithoutAuthorInput!]
}

input OpinionsUpdateManyWithoutDiscussionInput {
  create: [OpinionsCreateWithoutDiscussionInput!]
  connect: [OpinionsWhereUniqueInput!]
  disconnect: [OpinionsWhereUniqueInput!]
  delete: [OpinionsWhereUniqueInput!]
  update: [OpinionsUpdateWithoutDiscussionInput!]
  upsert: [OpinionsUpsertWithoutDiscussionInput!]
}

input OpinionsUpdateWithoutAuthorDataInput {
  content: String
  discussion: DiscussionUpdateOneWithoutOpinionsInput
}

input OpinionsUpdateWithoutAuthorInput {
  where: OpinionsWhereUniqueInput!
  data: OpinionsUpdateWithoutAuthorDataInput!
}

input OpinionsUpdateWithoutDiscussionDataInput {
  content: String
  author: UserUpdateOneWithoutOpinionsInput
}

input OpinionsUpdateWithoutDiscussionInput {
  where: OpinionsWhereUniqueInput!
  data: OpinionsUpdateWithoutDiscussionDataInput!
}

input OpinionsUpsertWithoutAuthorInput {
  where: OpinionsWhereUniqueInput!
  update: OpinionsUpdateWithoutAuthorDataInput!
  create: OpinionsCreateWithoutAuthorInput!
}

input OpinionsUpsertWithoutDiscussionInput {
  where: OpinionsWhereUniqueInput!
  update: OpinionsUpdateWithoutDiscussionDataInput!
  create: OpinionsCreateWithoutDiscussionInput!
}

input OpinionsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OpinionsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OpinionsWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  author: UserWhereInput
  discussion: DiscussionWhereInput
}

input OpinionsWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  institutionses(where: InstitutionsWhereInput, orderBy: InstitutionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institutions]!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  connects(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect]!
  forums(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Forum]!
  discussions(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion]!
  opinionses(where: OpinionsWhereInput, orderBy: OpinionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinions]!
  file(where: FileWhereUniqueInput!): File
  post(where: PostWhereUniqueInput!): Post
  article(where: ArticleWhereUniqueInput!): Article
  country(where: CountryWhereUniqueInput!): Country
  institutions(where: InstitutionsWhereUniqueInput!): Institutions
  department(where: DepartmentWhereUniqueInput!): Department
  interest(where: InterestWhereUniqueInput!): Interest
  user(where: UserWhereUniqueInput!): User
  connect(where: ConnectWhereUniqueInput!): Connect
  forum(where: ForumWhereUniqueInput!): Forum
  discussion(where: DiscussionWhereUniqueInput!): Discussion
  opinions(where: OpinionsWhereUniqueInput!): Opinions
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  institutionsesConnection(where: InstitutionsWhereInput, orderBy: InstitutionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstitutionsConnection!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  interestsConnection(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterestConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  connectsConnection(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConnectConnection!
  forumsConnection(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ForumConnection!
  discussionsConnection(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussionConnection!
  opinionsesConnection(where: OpinionsWhereInput, orderBy: OpinionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpinionsConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  institutions(where: InstitutionsSubscriptionWhereInput): InstitutionsSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  interest(where: InterestSubscriptionWhereInput): InterestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  connect(where: ConnectSubscriptionWhereInput): ConnectSubscriptionPayload
  forum(where: ForumSubscriptionWhereInput): ForumSubscriptionPayload
  discussion(where: DiscussionSubscriptionWhereInput): DiscussionSubscriptionPayload
  opinions(where: OpinionsSubscriptionWhereInput): OpinionsSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutCountryInput {
  create: [UserCreateWithoutCountryInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFavouritesInput {
  create: [UserCreateWithoutFavouritesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInterestInput {
  create: [UserCreateWithoutInterestInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConectFromInput {
  create: UserCreateWithoutConectFromInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConnectToInput {
  create: UserCreateWithoutConnectToInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyDiscussionsInput {
  create: UserCreateWithoutMyDiscussionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOpinionsInput {
  create: UserCreateWithoutOpinionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutArticlesInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutConectFromInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutConnectToInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutCountryInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutDepartmentInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutFavouritesInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutInstitutionInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutInterestInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutMyDiscussionsInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
  opinions: OpinionsCreateManyWithoutAuthorInput
}

input UserCreateWithoutOpinionsInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  gender_ASC
  gender_DESC
  type_ASC
  type_DESC
  userType_ASC
  userType_DESC
  newConnectNot_ASC
  newConnectNot_DESC
  newCommentNot_ASC
  newCommentNot_DESC
  newMessageNot_ASC
  newMessageNot_DESC
  newProfileNot_ASC
  newProfileNot_DESC
  completedProfile_ASC
  completedProfile_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateManyWithoutCountryInput {
  create: [UserCreateWithoutCountryInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutCountryInput!]
  upsert: [UserUpsertWithoutCountryInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutDepartmentInput!]
  upsert: [UserUpsertWithoutDepartmentInput!]
}

input UserUpdateManyWithoutFavouritesInput {
  create: [UserCreateWithoutFavouritesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutFavouritesInput!]
  upsert: [UserUpsertWithoutFavouritesInput!]
}

input UserUpdateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutInstitutionInput!]
  upsert: [UserUpsertWithoutInstitutionInput!]
}

input UserUpdateManyWithoutInterestInput {
  create: [UserCreateWithoutInterestInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutInterestInput!]
  upsert: [UserUpsertWithoutInterestInput!]
}

input UserUpdateNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateNestedInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutArticlesInput
  upsert: UserUpsertWithoutArticlesInput
}

input UserUpdateOneWithoutConectFromInput {
  create: UserCreateWithoutConectFromInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutConectFromInput
  upsert: UserUpsertWithoutConectFromInput
}

input UserUpdateOneWithoutConnectToInput {
  create: UserCreateWithoutConnectToInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutConnectToInput
  upsert: UserUpsertWithoutConnectToInput
}

input UserUpdateOneWithoutMyDiscussionsInput {
  create: UserCreateWithoutMyDiscussionsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutMyDiscussionsInput
  upsert: UserUpsertWithoutMyDiscussionsInput
}

input UserUpdateOneWithoutOpinionsInput {
  create: UserCreateWithoutOpinionsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutOpinionsInput
  upsert: UserUpsertWithoutOpinionsInput
}

input UserUpdateWithoutArticlesDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutArticlesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutArticlesDataInput!
}

input UserUpdateWithoutConectFromDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutConectFromInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConectFromDataInput!
}

input UserUpdateWithoutConnectToDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutConnectToInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConnectToDataInput!
}

input UserUpdateWithoutCountryDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCountryInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCountryDataInput!
}

input UserUpdateWithoutDepartmentDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpdateWithoutFavouritesDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutFavouritesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavouritesDataInput!
}

input UserUpdateWithoutInstitutionDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInstitutionDataInput!
}

input UserUpdateWithoutInterestDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutInterestInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInterestDataInput!
}

input UserUpdateWithoutMyDiscussionsDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
  opinions: OpinionsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMyDiscussionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMyDiscussionsDataInput!
}

input UserUpdateWithoutOpinionsDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutOpinionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOpinionsDataInput!
}

input UserUpsertNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutArticlesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutArticlesDataInput!
  create: UserCreateWithoutArticlesInput!
}

input UserUpsertWithoutConectFromInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConectFromDataInput!
  create: UserCreateWithoutConectFromInput!
}

input UserUpsertWithoutConnectToInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConnectToDataInput!
  create: UserCreateWithoutConnectToInput!
}

input UserUpsertWithoutCountryInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCountryDataInput!
  create: UserCreateWithoutCountryInput!
}

input UserUpsertWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserUpsertWithoutFavouritesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavouritesDataInput!
  create: UserCreateWithoutFavouritesInput!
}

input UserUpsertWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInstitutionDataInput!
  create: UserCreateWithoutInstitutionInput!
}

input UserUpsertWithoutInterestInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInterestDataInput!
  create: UserCreateWithoutInterestInput!
}

input UserUpsertWithoutMyDiscussionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMyDiscussionsDataInput!
  create: UserCreateWithoutMyDiscussionsInput!
}

input UserUpsertWithoutOpinionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOpinionsDataInput!
  create: UserCreateWithoutOpinionsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  firstname: String
  """
  All values that are not equal to given value.
  """
  firstname_not: String
  """
  All values that are contained in given list.
  """
  firstname_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstname_not_in: [String!]
  """
  All values less than the given value.
  """
  firstname_lt: String
  """
  All values less than or equal the given value.
  """
  firstname_lte: String
  """
  All values greater than the given value.
  """
  firstname_gt: String
  """
  All values greater than or equal the given value.
  """
  firstname_gte: String
  """
  All values containing the given string.
  """
  firstname_contains: String
  """
  All values not containing the given string.
  """
  firstname_not_contains: String
  """
  All values starting with the given string.
  """
  firstname_starts_with: String
  """
  All values not starting with the given string.
  """
  firstname_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstname_ends_with: String
  """
  All values not ending with the given string.
  """
  firstname_not_ends_with: String
  lastname: String
  """
  All values that are not equal to given value.
  """
  lastname_not: String
  """
  All values that are contained in given list.
  """
  lastname_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastname_not_in: [String!]
  """
  All values less than the given value.
  """
  lastname_lt: String
  """
  All values less than or equal the given value.
  """
  lastname_lte: String
  """
  All values greater than the given value.
  """
  lastname_gt: String
  """
  All values greater than or equal the given value.
  """
  lastname_gte: String
  """
  All values containing the given string.
  """
  lastname_contains: String
  """
  All values not containing the given string.
  """
  lastname_not_contains: String
  """
  All values starting with the given string.
  """
  lastname_starts_with: String
  """
  All values not starting with the given string.
  """
  lastname_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastname_ends_with: String
  """
  All values not ending with the given string.
  """
  lastname_not_ends_with: String
  gender: String
  """
  All values that are not equal to given value.
  """
  gender_not: String
  """
  All values that are contained in given list.
  """
  gender_in: [String!]
  """
  All values that are not contained in given list.
  """
  gender_not_in: [String!]
  """
  All values less than the given value.
  """
  gender_lt: String
  """
  All values less than or equal the given value.
  """
  gender_lte: String
  """
  All values greater than the given value.
  """
  gender_gt: String
  """
  All values greater than or equal the given value.
  """
  gender_gte: String
  """
  All values containing the given string.
  """
  gender_contains: String
  """
  All values not containing the given string.
  """
  gender_not_contains: String
  """
  All values starting with the given string.
  """
  gender_starts_with: String
  """
  All values not starting with the given string.
  """
  gender_not_starts_with: String
  """
  All values ending with the given string.
  """
  gender_ends_with: String
  """
  All values not ending with the given string.
  """
  gender_not_ends_with: String
  type: String
  """
  All values that are not equal to given value.
  """
  type_not: String
  """
  All values that are contained in given list.
  """
  type_in: [String!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [String!]
  """
  All values less than the given value.
  """
  type_lt: String
  """
  All values less than or equal the given value.
  """
  type_lte: String
  """
  All values greater than the given value.
  """
  type_gt: String
  """
  All values greater than or equal the given value.
  """
  type_gte: String
  """
  All values containing the given string.
  """
  type_contains: String
  """
  All values not containing the given string.
  """
  type_not_contains: String
  """
  All values starting with the given string.
  """
  type_starts_with: String
  """
  All values not starting with the given string.
  """
  type_not_starts_with: String
  """
  All values ending with the given string.
  """
  type_ends_with: String
  """
  All values not ending with the given string.
  """
  type_not_ends_with: String
  userType: String
  """
  All values that are not equal to given value.
  """
  userType_not: String
  """
  All values that are contained in given list.
  """
  userType_in: [String!]
  """
  All values that are not contained in given list.
  """
  userType_not_in: [String!]
  """
  All values less than the given value.
  """
  userType_lt: String
  """
  All values less than or equal the given value.
  """
  userType_lte: String
  """
  All values greater than the given value.
  """
  userType_gt: String
  """
  All values greater than or equal the given value.
  """
  userType_gte: String
  """
  All values containing the given string.
  """
  userType_contains: String
  """
  All values not containing the given string.
  """
  userType_not_contains: String
  """
  All values starting with the given string.
  """
  userType_starts_with: String
  """
  All values not starting with the given string.
  """
  userType_not_starts_with: String
  """
  All values ending with the given string.
  """
  userType_ends_with: String
  """
  All values not ending with the given string.
  """
  userType_not_ends_with: String
  newConnectNot: Boolean
  """
  All values that are not equal to given value.
  """
  newConnectNot_not: Boolean
  newCommentNot: Boolean
  """
  All values that are not equal to given value.
  """
  newCommentNot_not: Boolean
  newMessageNot: Boolean
  """
  All values that are not equal to given value.
  """
  newMessageNot_not: Boolean
  newProfileNot: Boolean
  """
  All values that are not equal to given value.
  """
  newProfileNot_not: Boolean
  completedProfile: Int
  """
  All values that are not equal to given value.
  """
  completedProfile_not: Int
  """
  All values that are contained in given list.
  """
  completedProfile_in: [Int!]
  """
  All values that are not contained in given list.
  """
  completedProfile_not_in: [Int!]
  """
  All values less than the given value.
  """
  completedProfile_lt: Int
  """
  All values less than or equal the given value.
  """
  completedProfile_lte: Int
  """
  All values greater than the given value.
  """
  completedProfile_gt: Int
  """
  All values greater than or equal the given value.
  """
  completedProfile_gte: Int
  country: CountryWhereInput
  institution: InstitutionsWhereInput
  department: DepartmentWhereInput
  interest: InterestWhereInput
  favourites_every: DiscussionWhereInput
  favourites_some: DiscussionWhereInput
  favourites_none: DiscussionWhereInput
  myDiscussions: DiscussionWhereInput
  connectTo_every: ConnectWhereInput
  connectTo_some: ConnectWhereInput
  connectTo_none: ConnectWhereInput
  ConectFrom_every: ConnectWhereInput
  ConectFrom_some: ConnectWhereInput
  ConectFrom_none: ConnectWhereInput
  articles_every: ArticleWhereInput
  articles_some: ArticleWhereInput
  articles_none: ArticleWhereInput
  opinions_every: OpinionsWhereInput
  opinions_some: OpinionsWhereInput
  opinions_none: OpinionsWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`

export type ConnectOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'accepted_ASC' |
  'accepted_DESC'

export type InstitutionType = 
  'University' |
  'College'

export type PostOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'isPublished_ASC' |
  'isPublished_DESC' |
  'title_ASC' |
  'title_DESC' |
  'text_ASC' |
  'text_DESC'

export type ForumOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'title_ASC' |
  'title_DESC' |
  'slug_ASC' |
  'slug_DESC' |
  'private_ASC' |
  'private_DESC'

export type OpinionsOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'content_ASC' |
  'content_DESC'

export type FileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'size_ASC' |
  'size_DESC' |
  'secret_ASC' |
  'secret_DESC' |
  'contentType_ASC' |
  'contentType_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'url_ASC' |
  'url_DESC'

export type ArticleOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'isPublished_ASC' |
  'isPublished_DESC' |
  'title_ASC' |
  'title_DESC' |
  'body_ASC' |
  'body_DESC' |
  'type_ASC' |
  'type_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'email_ASC' |
  'email_DESC' |
  'username_ASC' |
  'username_DESC' |
  'password_ASC' |
  'password_DESC' |
  'firstname_ASC' |
  'firstname_DESC' |
  'lastname_ASC' |
  'lastname_DESC' |
  'gender_ASC' |
  'gender_DESC' |
  'type_ASC' |
  'type_DESC' |
  'userType_ASC' |
  'userType_DESC' |
  'newConnectNot_ASC' |
  'newConnectNot_DESC' |
  'newCommentNot_ASC' |
  'newCommentNot_DESC' |
  'newMessageNot_ASC' |
  'newMessageNot_DESC' |
  'newProfileNot_ASC' |
  'newProfileNot_DESC' |
  'completedProfile_ASC' |
  'completedProfile_DESC'

export type Arcticletype = 
  'External' |
  'Internal'

export type DiscussionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'title_ASC' |
  'title_DESC' |
  'slug_ASC' |
  'slug_DESC' |
  'content_ASC' |
  'content_DESC' |
  'private_ASC' |
  'private_DESC'

export type DepartmentOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'name_ASC' |
  'name_DESC'

export type InterestOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'name_ASC' |
  'name_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export type CountryOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'shortName_ASC' |
  'shortName_DESC' |
  'name_ASC' |
  'name_DESC'

export type InstitutionsOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'title_ASC' |
  'title_DESC' |
  'type_ASC' |
  'type_DESC'

export interface PostUpdateInput {
  isPublished?: Boolean
  title?: String
  text?: String
}

export interface FileWhereInput {
  AND?: FileWhereInput[] | FileWhereInput
  OR?: FileWhereInput[] | FileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  size?: Int
  size_not?: Int
  size_in?: Int[] | Int
  size_not_in?: Int[] | Int
  size_lt?: Int
  size_lte?: Int
  size_gt?: Int
  size_gte?: Int
  secret?: String
  secret_not?: String
  secret_in?: String[] | String
  secret_not_in?: String[] | String
  secret_lt?: String
  secret_lte?: String
  secret_gt?: String
  secret_gte?: String
  secret_contains?: String
  secret_not_contains?: String
  secret_starts_with?: String
  secret_not_starts_with?: String
  secret_ends_with?: String
  secret_not_ends_with?: String
  contentType?: String
  contentType_not?: String
  contentType_in?: String[] | String
  contentType_not_in?: String[] | String
  contentType_lt?: String
  contentType_lte?: String
  contentType_gt?: String
  contentType_gte?: String
  contentType_contains?: String
  contentType_not_contains?: String
  contentType_starts_with?: String
  contentType_not_starts_with?: String
  contentType_ends_with?: String
  contentType_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  url?: String
  url_not?: String
  url_in?: String[] | String
  url_not_in?: String[] | String
  url_lt?: String
  url_lte?: String
  url_gt?: String
  url_gte?: String
  url_contains?: String
  url_not_contains?: String
  url_starts_with?: String
  url_not_starts_with?: String
  url_ends_with?: String
  url_not_ends_with?: String
}

export interface CountryUpsertWithoutUsersInput {
  where: CountryWhereUniqueInput
  update: CountryUpdateWithoutUsersDataInput
  create: CountryCreateWithoutUsersInput
}

export interface InstitutionsWhereInput {
  AND?: InstitutionsWhereInput[] | InstitutionsWhereInput
  OR?: InstitutionsWhereInput[] | InstitutionsWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  type?: InstitutionType
  type_not?: InstitutionType
  type_in?: InstitutionType[] | InstitutionType
  type_not_in?: InstitutionType[] | InstitutionType
  country?: CountryWhereInput
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface InstitutionsUpdateOneWithoutUsersInput {
  create?: InstitutionsCreateWithoutUsersInput
  connect?: InstitutionsWhereUniqueInput
  disconnect?: InstitutionsWhereUniqueInput
  delete?: InstitutionsWhereUniqueInput
  update?: InstitutionsUpdateWithoutUsersInput
  upsert?: InstitutionsUpsertWithoutUsersInput
}

export interface InterestWhereInput {
  AND?: InterestWhereInput[] | InterestWhereInput
  OR?: InterestWhereInput[] | InterestWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  file?: FileWhereInput
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface InstitutionsUpdateWithoutUsersInput {
  where: InstitutionsWhereUniqueInput
  data: InstitutionsUpdateWithoutUsersDataInput
}

export interface OpinionsWhereInput {
  AND?: OpinionsWhereInput[] | OpinionsWhereInput
  OR?: OpinionsWhereInput[] | OpinionsWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  author?: UserWhereInput
  discussion?: DiscussionWhereInput
}

export interface InstitutionsUpdateWithoutUsersDataInput {
  title?: String
  type?: InstitutionType
  country?: CountryUpdateOneInput
}

export interface CountryWhereInput {
  AND?: CountryWhereInput[] | CountryWhereInput
  OR?: CountryWhereInput[] | CountryWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  shortName?: String
  shortName_not?: String
  shortName_in?: String[] | String
  shortName_not_in?: String[] | String
  shortName_lt?: String
  shortName_lte?: String
  shortName_gt?: String
  shortName_gte?: String
  shortName_contains?: String
  shortName_not_contains?: String
  shortName_starts_with?: String
  shortName_not_starts_with?: String
  shortName_ends_with?: String
  shortName_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface ConnectCreateManyWithoutFromInput {
  create?: ConnectCreateWithoutFromInput[] | ConnectCreateWithoutFromInput
  connect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
}

export interface OpinionsUpdateManyWithoutDiscussionInput {
  create?: OpinionsCreateWithoutDiscussionInput[] | OpinionsCreateWithoutDiscussionInput
  connect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  disconnect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  delete?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  update?: OpinionsUpdateWithoutDiscussionInput[] | OpinionsUpdateWithoutDiscussionInput
  upsert?: OpinionsUpsertWithoutDiscussionInput[] | OpinionsUpsertWithoutDiscussionInput
}

export interface ConnectCreateWithoutFromInput {
  accepted?: Boolean
  to: UserCreateOneWithoutConnectToInput
}

export interface CountryUpdateOneInput {
  create?: CountryCreateInput
  connect?: CountryWhereUniqueInput
  disconnect?: CountryWhereUniqueInput
  delete?: CountryWhereUniqueInput
  update?: CountryUpdateNestedInput
  upsert?: CountryUpsertNestedInput
}

export interface UserCreateOneWithoutConnectToInput {
  create?: UserCreateWithoutConnectToInput
  connect?: UserWhereUniqueInput
}

export interface OpinionsSubscriptionWhereInput {
  AND?: OpinionsSubscriptionWhereInput[] | OpinionsSubscriptionWhereInput
  OR?: OpinionsSubscriptionWhereInput[] | OpinionsSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: OpinionsWhereInput
}

export interface UserCreateWithoutConnectToInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface ForumSubscriptionWhereInput {
  AND?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput
  OR?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ForumWhereInput
}

export interface ArticleCreateManyWithoutAuthorInput {
  create?: ArticleCreateWithoutAuthorInput[] | ArticleCreateWithoutAuthorInput
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput
}

export interface ConnectSubscriptionWhereInput {
  AND?: ConnectSubscriptionWhereInput[] | ConnectSubscriptionWhereInput
  OR?: ConnectSubscriptionWhereInput[] | ConnectSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ConnectWhereInput
}

export interface ArticleCreateWithoutAuthorInput {
  isPublished?: Boolean
  title: String
  body: String
  type?: Arcticletype
}

export interface InterestSubscriptionWhereInput {
  AND?: InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  OR?: InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: InterestWhereInput
}

export interface OpinionsCreateManyWithoutAuthorInput {
  create?: OpinionsCreateWithoutAuthorInput[] | OpinionsCreateWithoutAuthorInput
  connect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
}

export interface InstitutionsSubscriptionWhereInput {
  AND?: InstitutionsSubscriptionWhereInput[] | InstitutionsSubscriptionWhereInput
  OR?: InstitutionsSubscriptionWhereInput[] | InstitutionsSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: InstitutionsWhereInput
}

export interface OpinionsCreateWithoutAuthorInput {
  content: String
  discussion: DiscussionCreateOneWithoutOpinionsInput
}

export interface ArticleSubscriptionWhereInput {
  AND?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput
  OR?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ArticleWhereInput
}

export interface DiscussionCreateOneWithoutOpinionsInput {
  create?: DiscussionCreateWithoutOpinionsInput
  connect?: DiscussionWhereUniqueInput
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
}

export interface DiscussionCreateWithoutOpinionsInput {
  title: String
  slug?: String
  content: String
  private?: Boolean
  tags?: DiscussionCreatetagsInput
  favourites?: UserCreateManyWithoutFavouritesInput
  author: UserCreateOneWithoutMyDiscussionsInput
}

export interface FileWhereUniqueInput {
  id?: ID_Input
  secret?: String
  url?: String
}

export interface OpinionsCreateManyWithoutDiscussionInput {
  create?: OpinionsCreateWithoutDiscussionInput[] | OpinionsCreateWithoutDiscussionInput
  connect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
}

export interface ArticleWhereUniqueInput {
  id?: ID_Input
}

export interface OpinionsCreateWithoutDiscussionInput {
  content: String
  author: UserCreateOneWithoutOpinionsInput
}

export interface InstitutionsWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateOneWithoutOpinionsInput {
  create?: UserCreateWithoutOpinionsInput
  connect?: UserWhereUniqueInput
}

export interface InterestWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateWithoutOpinionsInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
}

export interface ConnectWhereUniqueInput {
  id?: ID_Input
}

export interface DepartmentCreateInput {
  name: String
  institution: InstitutionsCreateOneInput
  users?: UserCreateManyWithoutDepartmentInput
}

export interface DiscussionWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateManyWithoutDepartmentInput {
  create?: UserCreateWithoutDepartmentInput[] | UserCreateWithoutDepartmentInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface OpinionsUpdateInput {
  content?: String
  author?: UserUpdateOneWithoutOpinionsInput
  discussion?: DiscussionUpdateOneWithoutOpinionsInput
}

export interface UserCreateWithoutDepartmentInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface UserUpsertNestedInput {
  where: UserWhereUniqueInput
  update: UserUpdateDataInput
  create: UserCreateInput
}

export interface InterestCreateInput {
  name: String
  file: FileCreateOneInput
  users?: UserCreateManyWithoutInterestInput
}

export interface UserUpdateNestedInput {
  where: UserWhereUniqueInput
  data: UserUpdateDataInput
}

export interface UserCreateManyWithoutInterestInput {
  create?: UserCreateWithoutInterestInput[] | UserCreateWithoutInterestInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface ForumUpdateInput {
  title?: String
  slug?: String
  private?: Boolean
  author?: UserUpdateOneInput
}

export interface UserCreateWithoutInterestInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface UserUpdateInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface UserCreateInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface UserUpdateWithoutInterestDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface ConnectCreateInput {
  accepted?: Boolean
  to: UserCreateOneWithoutConnectToInput
  from: UserCreateOneWithoutConectFromInput
}

export interface UserUpdateManyWithoutInterestInput {
  create?: UserCreateWithoutInterestInput[] | UserCreateWithoutInterestInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutInterestInput[] | UserUpdateWithoutInterestInput
  upsert?: UserUpsertWithoutInterestInput[] | UserUpsertWithoutInterestInput
}

export interface ForumCreateInput {
  title: String
  slug?: String
  private?: Boolean
  author: UserCreateOneInput
}

export interface UserUpsertWithoutDepartmentInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutDepartmentDataInput
  create: UserCreateWithoutDepartmentInput
}

export interface UserCreateOneInput {
  create?: UserCreateInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutDepartmentInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutDepartmentDataInput
}

export interface DiscussionCreateInput {
  title: String
  slug?: String
  content: String
  private?: Boolean
  tags?: DiscussionCreatetagsInput
  favourites?: UserCreateManyWithoutFavouritesInput
  author: UserCreateOneWithoutMyDiscussionsInput
  opinions?: OpinionsCreateManyWithoutDiscussionInput
}

export interface DepartmentUpdateInput {
  name?: String
  institution?: InstitutionsUpdateOneInput
  users?: UserUpdateManyWithoutDepartmentInput
}

export interface OpinionsCreateInput {
  content: String
  author: UserCreateOneWithoutOpinionsInput
  discussion: DiscussionCreateOneWithoutOpinionsInput
}

export interface CountryUpdateInput {
  shortName?: String
  name?: String
  users?: UserUpdateManyWithoutCountryInput
}

export interface FileUpdateInput {
  name?: String
  size?: Int
  secret?: String
  contentType?: String
  url?: String
}

export interface InstitutionsUpsertWithoutUsersInput {
  where: InstitutionsWhereUniqueInput
  update: InstitutionsUpdateWithoutUsersDataInput
  create: InstitutionsCreateWithoutUsersInput
}

export interface UserUpdateOneWithoutOpinionsInput {
  create?: UserCreateWithoutOpinionsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutOpinionsInput
  upsert?: UserUpsertWithoutOpinionsInput
}

export interface UserUpsertWithoutCountryInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutCountryDataInput
  create: UserCreateWithoutCountryInput
}

export interface ArticleUpdateInput {
  isPublished?: Boolean
  title?: String
  body?: String
  type?: Arcticletype
  author?: UserUpdateOneWithoutArticlesInput
}

export interface InstitutionsUpsertNestedInput {
  where: InstitutionsWhereUniqueInput
  update: InstitutionsUpdateDataInput
  create: InstitutionsCreateInput
}

export interface UserUpdateOneWithoutArticlesInput {
  create?: UserCreateWithoutArticlesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutArticlesInput
  upsert?: UserUpsertWithoutArticlesInput
}

export interface DiscussionUpsertWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput
  update: DiscussionUpdateWithoutFavouritesDataInput
  create: DiscussionCreateWithoutFavouritesInput
}

export interface UserUpdateWithoutArticlesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutArticlesDataInput
}

export interface ConnectUpsertWithoutToInput {
  where: ConnectWhereUniqueInput
  update: ConnectUpdateWithoutToDataInput
  create: ConnectCreateWithoutToInput
}

export interface UserUpdateWithoutArticlesDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface DiscussionUpsertWithoutAuthorInput {
  where: DiscussionWhereUniqueInput
  update: DiscussionUpdateWithoutAuthorDataInput
  create: DiscussionCreateWithoutAuthorInput
}

export interface CountryUpdateOneWithoutUsersInput {
  create?: CountryCreateWithoutUsersInput
  connect?: CountryWhereUniqueInput
  disconnect?: CountryWhereUniqueInput
  delete?: CountryWhereUniqueInput
  update?: CountryUpdateWithoutUsersInput
  upsert?: CountryUpsertWithoutUsersInput
}

export interface UserUpsertWithoutOpinionsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutOpinionsDataInput
  create: UserCreateWithoutOpinionsInput
}

export interface CountryUpdateWithoutUsersInput {
  where: CountryWhereUniqueInput
  data: CountryUpdateWithoutUsersDataInput
}

export interface UserUpdateWithoutOpinionsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutOpinionsDataInput
}

export interface CountryUpdateWithoutUsersDataInput {
  shortName?: String
  name?: String
}

export interface PostCreateInput {
  isPublished?: Boolean
  title: String
  text: String
}

export interface DepartmentWhereInput {
  AND?: DepartmentWhereInput[] | DepartmentWhereInput
  OR?: DepartmentWhereInput[] | DepartmentWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  institution?: InstitutionsWhereInput
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface UserCreateOneWithoutArticlesInput {
  create?: UserCreateWithoutArticlesInput
  connect?: UserWhereUniqueInput
}

export interface DiscussionWhereInput {
  AND?: DiscussionWhereInput[] | DiscussionWhereInput
  OR?: DiscussionWhereInput[] | DiscussionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  slug?: String
  slug_not?: String
  slug_in?: String[] | String
  slug_not_in?: String[] | String
  slug_lt?: String
  slug_lte?: String
  slug_gt?: String
  slug_gte?: String
  slug_contains?: String
  slug_not_contains?: String
  slug_starts_with?: String
  slug_not_starts_with?: String
  slug_ends_with?: String
  slug_not_ends_with?: String
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  private?: Boolean
  private_not?: Boolean
  favourites_every?: UserWhereInput
  favourites_some?: UserWhereInput
  favourites_none?: UserWhereInput
  author?: UserWhereInput
  opinions_every?: OpinionsWhereInput
  opinions_some?: OpinionsWhereInput
  opinions_none?: OpinionsWhereInput
}

export interface CountryCreateOneWithoutUsersInput {
  create?: CountryCreateWithoutUsersInput
  connect?: CountryWhereUniqueInput
}

export interface ConnectWhereInput {
  AND?: ConnectWhereInput[] | ConnectWhereInput
  OR?: ConnectWhereInput[] | ConnectWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  accepted?: Boolean
  accepted_not?: Boolean
  to?: UserWhereInput
  from?: UserWhereInput
}

export interface InstitutionsCreateOneWithoutUsersInput {
  create?: InstitutionsCreateWithoutUsersInput
  connect?: InstitutionsWhereUniqueInput
}

export interface OpinionsUpdateWithoutDiscussionDataInput {
  content?: String
  author?: UserUpdateOneWithoutOpinionsInput
}

export interface CountryCreateOneInput {
  create?: CountryCreateInput
  connect?: CountryWhereUniqueInput
}

export interface OpinionsUpdateWithoutDiscussionInput {
  where: OpinionsWhereUniqueInput
  data: OpinionsUpdateWithoutDiscussionDataInput
}

export interface UserCreateManyWithoutCountryInput {
  create?: UserCreateWithoutCountryInput[] | UserCreateWithoutCountryInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface CountryUpdateNestedInput {
  where: CountryWhereUniqueInput
  data: CountryUpdateDataInput
}

export interface DepartmentCreateOneWithoutUsersInput {
  create?: DepartmentCreateWithoutUsersInput
  connect?: DepartmentWhereUniqueInput
}

export interface CountryUpdateDataInput {
  shortName?: String
  name?: String
  users?: UserUpdateManyWithoutCountryInput
}

export interface InstitutionsCreateOneInput {
  create?: InstitutionsCreateInput
  connect?: InstitutionsWhereUniqueInput
}

export interface UserUpdateManyWithoutCountryInput {
  create?: UserCreateWithoutCountryInput[] | UserCreateWithoutCountryInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutCountryInput[] | UserUpdateWithoutCountryInput
  upsert?: UserUpsertWithoutCountryInput[] | UserUpsertWithoutCountryInput
}

export interface UserCreateManyWithoutInstitutionInput {
  create?: UserCreateWithoutInstitutionInput[] | UserCreateWithoutInstitutionInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface UserUpdateWithoutCountryInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutCountryDataInput
}

export interface InterestCreateOneWithoutUsersInput {
  create?: InterestCreateWithoutUsersInput
  connect?: InterestWhereUniqueInput
}

export interface UserUpdateWithoutCountryDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface FileCreateOneInput {
  create?: FileCreateInput
  connect?: FileWhereUniqueInput
}

export interface DepartmentUpdateOneWithoutUsersInput {
  create?: DepartmentCreateWithoutUsersInput
  connect?: DepartmentWhereUniqueInput
  disconnect?: DepartmentWhereUniqueInput
  delete?: DepartmentWhereUniqueInput
  update?: DepartmentUpdateWithoutUsersInput
  upsert?: DepartmentUpsertWithoutUsersInput
}

export interface DiscussionCreateWithoutFavouritesInput {
  title: String
  slug?: String
  content: String
  private?: Boolean
  tags?: DiscussionCreatetagsInput
  author: UserCreateOneWithoutMyDiscussionsInput
  opinions?: OpinionsCreateManyWithoutDiscussionInput
}

export interface DepartmentUpdateWithoutUsersInput {
  where: DepartmentWhereUniqueInput
  data: DepartmentUpdateWithoutUsersDataInput
}

export interface UserCreateOneWithoutMyDiscussionsInput {
  create?: UserCreateWithoutMyDiscussionsInput
  connect?: UserWhereUniqueInput
}

export interface DepartmentUpdateWithoutUsersDataInput {
  name?: String
  institution?: InstitutionsUpdateOneInput
}

export interface ConnectCreateManyWithoutToInput {
  create?: ConnectCreateWithoutToInput[] | ConnectCreateWithoutToInput
  connect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
}

export interface InstitutionsUpdateOneInput {
  create?: InstitutionsCreateInput
  connect?: InstitutionsWhereUniqueInput
  disconnect?: InstitutionsWhereUniqueInput
  delete?: InstitutionsWhereUniqueInput
  update?: InstitutionsUpdateNestedInput
  upsert?: InstitutionsUpsertNestedInput
}

export interface UserCreateOneWithoutConectFromInput {
  create?: UserCreateWithoutConectFromInput
  connect?: UserWhereUniqueInput
}

export interface InstitutionsUpdateNestedInput {
  where: InstitutionsWhereUniqueInput
  data: InstitutionsUpdateDataInput
}

export interface DiscussionCreateOneWithoutAuthorInput {
  create?: DiscussionCreateWithoutAuthorInput
  connect?: DiscussionWhereUniqueInput
}

export interface InstitutionsUpdateDataInput {
  title?: String
  type?: InstitutionType
  country?: CountryUpdateOneInput
  users?: UserUpdateManyWithoutInstitutionInput
}

export interface UserCreateManyWithoutFavouritesInput {
  create?: UserCreateWithoutFavouritesInput[] | UserCreateWithoutFavouritesInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface UserUpdateManyWithoutInstitutionInput {
  create?: UserCreateWithoutInstitutionInput[] | UserCreateWithoutInstitutionInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutInstitutionInput[] | UserUpdateWithoutInstitutionInput
  upsert?: UserUpsertWithoutInstitutionInput[] | UserUpsertWithoutInstitutionInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  username?: String
  username_not?: String
  username_in?: String[] | String
  username_not_in?: String[] | String
  username_lt?: String
  username_lte?: String
  username_gt?: String
  username_gte?: String
  username_contains?: String
  username_not_contains?: String
  username_starts_with?: String
  username_not_starts_with?: String
  username_ends_with?: String
  username_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  firstname?: String
  firstname_not?: String
  firstname_in?: String[] | String
  firstname_not_in?: String[] | String
  firstname_lt?: String
  firstname_lte?: String
  firstname_gt?: String
  firstname_gte?: String
  firstname_contains?: String
  firstname_not_contains?: String
  firstname_starts_with?: String
  firstname_not_starts_with?: String
  firstname_ends_with?: String
  firstname_not_ends_with?: String
  lastname?: String
  lastname_not?: String
  lastname_in?: String[] | String
  lastname_not_in?: String[] | String
  lastname_lt?: String
  lastname_lte?: String
  lastname_gt?: String
  lastname_gte?: String
  lastname_contains?: String
  lastname_not_contains?: String
  lastname_starts_with?: String
  lastname_not_starts_with?: String
  lastname_ends_with?: String
  lastname_not_ends_with?: String
  gender?: String
  gender_not?: String
  gender_in?: String[] | String
  gender_not_in?: String[] | String
  gender_lt?: String
  gender_lte?: String
  gender_gt?: String
  gender_gte?: String
  gender_contains?: String
  gender_not_contains?: String
  gender_starts_with?: String
  gender_not_starts_with?: String
  gender_ends_with?: String
  gender_not_ends_with?: String
  type?: String
  type_not?: String
  type_in?: String[] | String
  type_not_in?: String[] | String
  type_lt?: String
  type_lte?: String
  type_gt?: String
  type_gte?: String
  type_contains?: String
  type_not_contains?: String
  type_starts_with?: String
  type_not_starts_with?: String
  type_ends_with?: String
  type_not_ends_with?: String
  userType?: String
  userType_not?: String
  userType_in?: String[] | String
  userType_not_in?: String[] | String
  userType_lt?: String
  userType_lte?: String
  userType_gt?: String
  userType_gte?: String
  userType_contains?: String
  userType_not_contains?: String
  userType_starts_with?: String
  userType_not_starts_with?: String
  userType_ends_with?: String
  userType_not_ends_with?: String
  newConnectNot?: Boolean
  newConnectNot_not?: Boolean
  newCommentNot?: Boolean
  newCommentNot_not?: Boolean
  newMessageNot?: Boolean
  newMessageNot_not?: Boolean
  newProfileNot?: Boolean
  newProfileNot_not?: Boolean
  completedProfile?: Int
  completedProfile_not?: Int
  completedProfile_in?: Int[] | Int
  completedProfile_not_in?: Int[] | Int
  completedProfile_lt?: Int
  completedProfile_lte?: Int
  completedProfile_gt?: Int
  completedProfile_gte?: Int
  country?: CountryWhereInput
  institution?: InstitutionsWhereInput
  department?: DepartmentWhereInput
  interest?: InterestWhereInput
  favourites_every?: DiscussionWhereInput
  favourites_some?: DiscussionWhereInput
  favourites_none?: DiscussionWhereInput
  myDiscussions?: DiscussionWhereInput
  connectTo_every?: ConnectWhereInput
  connectTo_some?: ConnectWhereInput
  connectTo_none?: ConnectWhereInput
  ConectFrom_every?: ConnectWhereInput
  ConectFrom_some?: ConnectWhereInput
  ConectFrom_none?: ConnectWhereInput
  articles_every?: ArticleWhereInput
  articles_some?: ArticleWhereInput
  articles_none?: ArticleWhereInput
  opinions_every?: OpinionsWhereInput
  opinions_some?: OpinionsWhereInput
  opinions_none?: OpinionsWhereInput
}

export interface UserUpdateWithoutInstitutionInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutInstitutionDataInput
}

export interface ArticleWhereInput {
  AND?: ArticleWhereInput[] | ArticleWhereInput
  OR?: ArticleWhereInput[] | ArticleWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  isPublished?: Boolean
  isPublished_not?: Boolean
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  body?: String
  body_not?: String
  body_in?: String[] | String
  body_not_in?: String[] | String
  body_lt?: String
  body_lte?: String
  body_gt?: String
  body_gte?: String
  body_contains?: String
  body_not_contains?: String
  body_starts_with?: String
  body_not_starts_with?: String
  body_ends_with?: String
  body_not_ends_with?: String
  type?: Arcticletype
  type_not?: Arcticletype
  type_in?: Arcticletype[] | Arcticletype
  type_not_in?: Arcticletype[] | Arcticletype
  author?: UserWhereInput
}

export interface UserUpdateWithoutInstitutionDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface DepartmentSubscriptionWhereInput {
  AND?: DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  OR?: DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: DepartmentWhereInput
}

export interface InterestUpdateOneWithoutUsersInput {
  create?: InterestCreateWithoutUsersInput
  connect?: InterestWhereUniqueInput
  disconnect?: InterestWhereUniqueInput
  delete?: InterestWhereUniqueInput
  update?: InterestUpdateWithoutUsersInput
  upsert?: InterestUpsertWithoutUsersInput
}

export interface CountrySubscriptionWhereInput {
  AND?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput
  OR?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CountryWhereInput
}

export interface InterestUpdateWithoutUsersInput {
  where: InterestWhereUniqueInput
  data: InterestUpdateWithoutUsersDataInput
}

export interface FileSubscriptionWhereInput {
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: FileWhereInput
}

export interface InterestUpdateWithoutUsersDataInput {
  name?: String
  file?: FileUpdateOneInput
}

export interface CountryWhereUniqueInput {
  id?: ID_Input
  shortName?: String
  name?: String
}

export interface FileUpdateOneInput {
  create?: FileCreateInput
  connect?: FileWhereUniqueInput
  disconnect?: FileWhereUniqueInput
  delete?: FileWhereUniqueInput
  update?: FileUpdateNestedInput
  upsert?: FileUpsertNestedInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
  username?: String
}

export interface FileUpdateNestedInput {
  where: FileWhereUniqueInput
  data: FileUpdateDataInput
}

export interface OpinionsWhereUniqueInput {
  id?: ID_Input
}

export interface FileUpdateDataInput {
  name?: String
  size?: Int
  secret?: String
  contentType?: String
  url?: String
}

export interface UserUpdateDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface FileUpsertNestedInput {
  where: FileWhereUniqueInput
  update: FileUpdateDataInput
  create: FileCreateInput
}

export interface ConnectUpdateInput {
  accepted?: Boolean
  to?: UserUpdateOneWithoutConnectToInput
  from?: UserUpdateOneWithoutConectFromInput
}

export interface InterestUpsertWithoutUsersInput {
  where: InterestWhereUniqueInput
  update: InterestUpdateWithoutUsersDataInput
  create: InterestCreateWithoutUsersInput
}

export interface UserUpdateWithoutInterestInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutInterestDataInput
}

export interface DiscussionUpdateManyWithoutFavouritesInput {
  create?: DiscussionCreateWithoutFavouritesInput[] | DiscussionCreateWithoutFavouritesInput
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput
  disconnect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput
  delete?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput
  update?: DiscussionUpdateWithoutFavouritesInput[] | DiscussionUpdateWithoutFavouritesInput
  upsert?: DiscussionUpsertWithoutFavouritesInput[] | DiscussionUpsertWithoutFavouritesInput
}

export interface UserUpdateWithoutDepartmentDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface DiscussionUpdateWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput
  data: DiscussionUpdateWithoutFavouritesDataInput
}

export interface InstitutionsUpdateInput {
  title?: String
  type?: InstitutionType
  country?: CountryUpdateOneInput
  users?: UserUpdateManyWithoutInstitutionInput
}

export interface DiscussionUpdateWithoutFavouritesDataInput {
  title?: String
  slug?: String
  content?: String
  private?: Boolean
  tags?: DiscussionUpdatetagsInput
  author?: UserUpdateOneWithoutMyDiscussionsInput
  opinions?: OpinionsUpdateManyWithoutDiscussionInput
}

export interface CountryUpsertNestedInput {
  where: CountryWhereUniqueInput
  update: CountryUpdateDataInput
  create: CountryCreateInput
}

export interface DiscussionUpdatetagsInput {
  set?: String[] | String
}

export interface UserUpsertWithoutInstitutionInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutInstitutionDataInput
  create: UserCreateWithoutInstitutionInput
}

export interface UserUpdateOneWithoutMyDiscussionsInput {
  create?: UserCreateWithoutMyDiscussionsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutMyDiscussionsInput
  upsert?: UserUpsertWithoutMyDiscussionsInput
}

export interface UserUpsertWithoutConectFromInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutConectFromDataInput
  create: UserCreateWithoutConectFromInput
}

export interface UserUpdateWithoutMyDiscussionsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutMyDiscussionsDataInput
}

export interface UserUpdateWithoutOpinionsDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
}

export interface UserUpdateWithoutMyDiscussionsDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface ArticleCreateInput {
  isPublished?: Boolean
  title: String
  body: String
  type?: Arcticletype
  author: UserCreateOneWithoutArticlesInput
}

export interface ConnectUpdateManyWithoutToInput {
  create?: ConnectCreateWithoutToInput[] | ConnectCreateWithoutToInput
  connect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  disconnect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  delete?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  update?: ConnectUpdateWithoutToInput[] | ConnectUpdateWithoutToInput
  upsert?: ConnectUpsertWithoutToInput[] | ConnectUpsertWithoutToInput
}

export interface CountryCreateWithoutUsersInput {
  shortName: String
  name: String
}

export interface ConnectUpdateWithoutToInput {
  where: ConnectWhereUniqueInput
  data: ConnectUpdateWithoutToDataInput
}

export interface CountryCreateInput {
  shortName: String
  name: String
  users?: UserCreateManyWithoutCountryInput
}

export interface ConnectUpdateWithoutToDataInput {
  accepted?: Boolean
  from?: UserUpdateOneWithoutConectFromInput
}

export interface DepartmentCreateWithoutUsersInput {
  name: String
  institution: InstitutionsCreateOneInput
}

export interface UserUpdateOneWithoutConectFromInput {
  create?: UserCreateWithoutConectFromInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutConectFromInput
  upsert?: UserUpsertWithoutConectFromInput
}

export interface UserCreateWithoutInstitutionInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface UserUpdateWithoutConectFromInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutConectFromDataInput
}

export interface DiscussionCreateManyWithoutFavouritesInput {
  create?: DiscussionCreateWithoutFavouritesInput[] | DiscussionCreateWithoutFavouritesInput
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput
}

export interface UserUpdateWithoutConectFromDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface UserCreateWithoutMyDiscussionsInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface DiscussionUpdateOneWithoutAuthorInput {
  create?: DiscussionCreateWithoutAuthorInput
  connect?: DiscussionWhereUniqueInput
  disconnect?: DiscussionWhereUniqueInput
  delete?: DiscussionWhereUniqueInput
  update?: DiscussionUpdateWithoutAuthorInput
  upsert?: DiscussionUpsertWithoutAuthorInput
}

export interface UserCreateWithoutConectFromInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface DiscussionUpdateWithoutAuthorInput {
  where: DiscussionWhereUniqueInput
  data: DiscussionUpdateWithoutAuthorDataInput
}

export interface UserCreateWithoutFavouritesInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface DiscussionUpdateWithoutAuthorDataInput {
  title?: String
  slug?: String
  content?: String
  private?: Boolean
  tags?: DiscussionUpdatetagsInput
  favourites?: UserUpdateManyWithoutFavouritesInput
  opinions?: OpinionsUpdateManyWithoutDiscussionInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserUpdateManyWithoutFavouritesInput {
  create?: UserCreateWithoutFavouritesInput[] | UserCreateWithoutFavouritesInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutFavouritesInput[] | UserUpdateWithoutFavouritesInput
  upsert?: UserUpsertWithoutFavouritesInput[] | UserUpsertWithoutFavouritesInput
}

export interface ForumWhereInput {
  AND?: ForumWhereInput[] | ForumWhereInput
  OR?: ForumWhereInput[] | ForumWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  slug?: String
  slug_not?: String
  slug_in?: String[] | String
  slug_not_in?: String[] | String
  slug_lt?: String
  slug_lte?: String
  slug_gt?: String
  slug_gte?: String
  slug_contains?: String
  slug_not_contains?: String
  slug_starts_with?: String
  slug_not_starts_with?: String
  slug_ends_with?: String
  slug_not_ends_with?: String
  private?: Boolean
  private_not?: Boolean
  author?: UserWhereInput
}

export interface UserUpdateWithoutFavouritesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutFavouritesDataInput
}

export interface DepartmentWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpdateWithoutFavouritesDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  connectTo?: ConnectUpdateManyWithoutToInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface DiscussionUpdateInput {
  title?: String
  slug?: String
  content?: String
  private?: Boolean
  tags?: DiscussionUpdatetagsInput
  favourites?: UserUpdateManyWithoutFavouritesInput
  author?: UserUpdateOneWithoutMyDiscussionsInput
  opinions?: OpinionsUpdateManyWithoutDiscussionInput
}

export interface ConnectUpdateManyWithoutFromInput {
  create?: ConnectCreateWithoutFromInput[] | ConnectCreateWithoutFromInput
  connect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  disconnect?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  delete?: ConnectWhereUniqueInput[] | ConnectWhereUniqueInput
  update?: ConnectUpdateWithoutFromInput[] | ConnectUpdateWithoutFromInput
  upsert?: ConnectUpsertWithoutFromInput[] | ConnectUpsertWithoutFromInput
}

export interface UserUpsertWithoutInterestInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutInterestDataInput
  create: UserCreateWithoutInterestInput
}

export interface ConnectUpdateWithoutFromInput {
  where: ConnectWhereUniqueInput
  data: ConnectUpdateWithoutFromDataInput
}

export interface UserUpdateManyWithoutDepartmentInput {
  create?: UserCreateWithoutDepartmentInput[] | UserCreateWithoutDepartmentInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutDepartmentInput[] | UserUpdateWithoutDepartmentInput
  upsert?: UserUpsertWithoutDepartmentInput[] | UserUpsertWithoutDepartmentInput
}

export interface ConnectUpdateWithoutFromDataInput {
  accepted?: Boolean
  to?: UserUpdateOneWithoutConnectToInput
}

export interface DepartmentUpsertWithoutUsersInput {
  where: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutUsersDataInput
  create: DepartmentCreateWithoutUsersInput
}

export interface UserUpdateOneWithoutConnectToInput {
  create?: UserCreateWithoutConnectToInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutConnectToInput
  upsert?: UserUpsertWithoutConnectToInput
}

export interface OpinionsUpsertWithoutDiscussionInput {
  where: OpinionsWhereUniqueInput
  update: OpinionsUpdateWithoutDiscussionDataInput
  create: OpinionsCreateWithoutDiscussionInput
}

export interface UserUpdateWithoutConnectToInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutConnectToDataInput
}

export interface UserCreateWithoutArticlesInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryCreateOneWithoutUsersInput
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface UserUpdateWithoutConnectToDataInput {
  email?: String
  username?: String
  password?: String
  firstname?: String
  lastname?: String
  gender?: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  country?: CountryUpdateOneWithoutUsersInput
  institution?: InstitutionsUpdateOneWithoutUsersInput
  department?: DepartmentUpdateOneWithoutUsersInput
  interest?: InterestUpdateOneWithoutUsersInput
  favourites?: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions?: DiscussionUpdateOneWithoutAuthorInput
  ConectFrom?: ConnectUpdateManyWithoutFromInput
  articles?: ArticleUpdateManyWithoutAuthorInput
  opinions?: OpinionsUpdateManyWithoutAuthorInput
}

export interface UserCreateWithoutCountryInput {
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
  institution?: InstitutionsCreateOneWithoutUsersInput
  department?: DepartmentCreateOneWithoutUsersInput
  interest?: InterestCreateOneWithoutUsersInput
  favourites?: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions?: DiscussionCreateOneWithoutAuthorInput
  connectTo?: ConnectCreateManyWithoutToInput
  ConectFrom?: ConnectCreateManyWithoutFromInput
  articles?: ArticleCreateManyWithoutAuthorInput
  opinions?: OpinionsCreateManyWithoutAuthorInput
}

export interface ArticleUpdateManyWithoutAuthorInput {
  create?: ArticleCreateWithoutAuthorInput[] | ArticleCreateWithoutAuthorInput
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput
  disconnect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput
  delete?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput
  update?: ArticleUpdateWithoutAuthorInput[] | ArticleUpdateWithoutAuthorInput
  upsert?: ArticleUpsertWithoutAuthorInput[] | ArticleUpsertWithoutAuthorInput
}

export interface InterestCreateWithoutUsersInput {
  name: String
  file: FileCreateOneInput
}

export interface ArticleUpdateWithoutAuthorInput {
  where: ArticleWhereUniqueInput
  data: ArticleUpdateWithoutAuthorDataInput
}

export interface ConnectCreateWithoutToInput {
  accepted?: Boolean
  from: UserCreateOneWithoutConectFromInput
}

export interface ArticleUpdateWithoutAuthorDataInput {
  isPublished?: Boolean
  title?: String
  body?: String
  type?: Arcticletype
}

export interface DiscussionSubscriptionWhereInput {
  AND?: DiscussionSubscriptionWhereInput[] | DiscussionSubscriptionWhereInput
  OR?: DiscussionSubscriptionWhereInput[] | DiscussionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: DiscussionWhereInput
}

export interface ArticleUpsertWithoutAuthorInput {
  where: ArticleWhereUniqueInput
  update: ArticleUpdateWithoutAuthorDataInput
  create: ArticleCreateWithoutAuthorInput
}

export interface PostWhereUniqueInput {
  id?: ID_Input
}

export interface OpinionsUpdateManyWithoutAuthorInput {
  create?: OpinionsCreateWithoutAuthorInput[] | OpinionsCreateWithoutAuthorInput
  connect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  disconnect?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  delete?: OpinionsWhereUniqueInput[] | OpinionsWhereUniqueInput
  update?: OpinionsUpdateWithoutAuthorInput[] | OpinionsUpdateWithoutAuthorInput
  upsert?: OpinionsUpsertWithoutAuthorInput[] | OpinionsUpsertWithoutAuthorInput
}

export interface UserUpdateOneInput {
  create?: UserCreateInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateNestedInput
  upsert?: UserUpsertNestedInput
}

export interface OpinionsUpdateWithoutAuthorInput {
  where: OpinionsWhereUniqueInput
  data: OpinionsUpdateWithoutAuthorDataInput
}

export interface UserUpsertWithoutArticlesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutArticlesDataInput
  create: UserCreateWithoutArticlesInput
}

export interface OpinionsUpdateWithoutAuthorDataInput {
  content?: String
  discussion?: DiscussionUpdateOneWithoutOpinionsInput
}

export interface FileCreateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
}

export interface DiscussionUpdateOneWithoutOpinionsInput {
  create?: DiscussionCreateWithoutOpinionsInput
  connect?: DiscussionWhereUniqueInput
  disconnect?: DiscussionWhereUniqueInput
  delete?: DiscussionWhereUniqueInput
  update?: DiscussionUpdateWithoutOpinionsInput
  upsert?: DiscussionUpsertWithoutOpinionsInput
}

export interface InstitutionsCreateInput {
  title: String
  type: InstitutionType
  country: CountryCreateOneInput
  users?: UserCreateManyWithoutInstitutionInput
}

export interface DiscussionUpdateWithoutOpinionsInput {
  where: DiscussionWhereUniqueInput
  data: DiscussionUpdateWithoutOpinionsDataInput
}

export interface DiscussionCreateWithoutAuthorInput {
  title: String
  slug?: String
  content: String
  private?: Boolean
  tags?: DiscussionCreatetagsInput
  favourites?: UserCreateManyWithoutFavouritesInput
  opinions?: OpinionsCreateManyWithoutDiscussionInput
}

export interface DiscussionUpdateWithoutOpinionsDataInput {
  title?: String
  slug?: String
  content?: String
  private?: Boolean
  tags?: DiscussionUpdatetagsInput
  favourites?: UserUpdateManyWithoutFavouritesInput
  author?: UserUpdateOneWithoutMyDiscussionsInput
}

export interface ForumWhereUniqueInput {
  id?: ID_Input
}

export interface DiscussionUpsertWithoutOpinionsInput {
  where: DiscussionWhereUniqueInput
  update: DiscussionUpdateWithoutOpinionsDataInput
  create: DiscussionCreateWithoutOpinionsInput
}

export interface UserUpsertWithoutMyDiscussionsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutMyDiscussionsDataInput
  create: UserCreateWithoutMyDiscussionsInput
}

export interface UserUpsertWithoutFavouritesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutFavouritesDataInput
  create: UserCreateWithoutFavouritesInput
}

export interface ConnectUpsertWithoutFromInput {
  where: ConnectWhereUniqueInput
  update: ConnectUpdateWithoutFromDataInput
  create: ConnectCreateWithoutFromInput
}

export interface UserUpsertWithoutConnectToInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutConnectToDataInput
  create: UserCreateWithoutConnectToInput
}

export interface OpinionsUpsertWithoutAuthorInput {
  where: OpinionsWhereUniqueInput
  update: OpinionsUpdateWithoutAuthorDataInput
  create: OpinionsCreateWithoutAuthorInput
}

export interface InstitutionsCreateWithoutUsersInput {
  title: String
  type: InstitutionType
  country: CountryCreateOneInput
}

export interface InterestUpdateInput {
  name?: String
  file?: FileUpdateOneInput
  users?: UserUpdateManyWithoutInterestInput
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  isPublished?: Boolean
  isPublished_not?: Boolean
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
}

export interface DiscussionCreatetagsInput {
  set?: String[] | String
}

/*
 * An object with an ID

 */
export interface Node {
  id: ID_Output
}

export interface OpinionsPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  content: String
}

/*
 * A connection to a list of items.

 */
export interface FileConnection {
  pageInfo: PageInfo
  edges: FileEdge[]
  aggregate: AggregateFile
}

export interface User extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  country?: Country
  institution?: Institutions
  department?: Department
  interest?: Interest
  favourites?: Discussion[]
  myDiscussions?: Discussion
  connectTo?: Connect[]
  ConectFrom?: Connect[]
  type?: String
  userType?: String
  articles?: Article[]
  opinions?: Opinions[]
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
}

export interface BatchPayload {
  count: Long
}

export interface Country extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  shortName: String
  name: String
  users?: User[]
}

export interface Article extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  body: String
  type?: Arcticletype
  author: User
}

export interface Department extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  institution: Institutions
  users?: User[]
}

export interface AggregateOpinions {
  count: Int
}

/*
 * An edge in a connection.

 */
export interface OpinionsEdge {
  node: Opinions
  cursor: String
}

/*
 * A connection to a list of items.

 */
export interface OpinionsConnection {
  pageInfo: PageInfo
  edges: OpinionsEdge[]
  aggregate: AggregateOpinions
}

/*
 * An edge in a connection.

 */
export interface DiscussionEdge {
  node: Discussion
  cursor: String
}

export interface Forum extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  slug?: String
  author: User
  private: Boolean
}

export interface AggregateForum {
  count: Int
}

export interface OpinionsSubscriptionPayload {
  mutation: MutationType
  node?: Opinions
  updatedFields?: String[]
  previousValues?: OpinionsPreviousValues
}

/*
 * A connection to a list of items.

 */
export interface ForumConnection {
  pageInfo: PageInfo
  edges: ForumEdge[]
  aggregate: AggregateForum
}

export interface FileSubscriptionPayload {
  mutation: MutationType
  node?: File
  updatedFields?: String[]
  previousValues?: FilePreviousValues
}

/*
 * An edge in a connection.

 */
export interface ConnectEdge {
  node: Connect
  cursor: String
}

export interface FilePreviousValues {
  id: ID_Output
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime
  updatedAt: DateTime
  url: String
}

export interface AggregateUser {
  count: Int
}

export interface Institutions extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  type: InstitutionType
  country: Country
  users?: User[]
}

/*
 * A connection to a list of items.

 */
export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node?: Post
  updatedFields?: String[]
  previousValues?: PostPreviousValues
}

/*
 * An edge in a connection.

 */
export interface InterestEdge {
  node: Interest
  cursor: String
}

export interface PostPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  text: String
}

export interface AggregateDepartment {
  count: Int
}

export interface DiscussionPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  slug?: String
  content: String
  tags?: String[]
  private: Boolean
}

/*
 * A connection to a list of items.

 */
export interface DepartmentConnection {
  pageInfo: PageInfo
  edges: DepartmentEdge[]
  aggregate: AggregateDepartment
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType
  node?: Article
  updatedFields?: String[]
  previousValues?: ArticlePreviousValues
}

/*
 * An edge in a connection.

 */
export interface InstitutionsEdge {
  node: Institutions
  cursor: String
}

export interface ArticlePreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  body: String
  type?: Arcticletype
}

export interface AggregateCountry {
  count: Int
}

export interface File extends Node {
  id: ID_Output
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime
  updatedAt: DateTime
  url: String
}

/*
 * A connection to a list of items.

 */
export interface CountryConnection {
  pageInfo: PageInfo
  edges: CountryEdge[]
  aggregate: AggregateCountry
}

export interface CountrySubscriptionPayload {
  mutation: MutationType
  node?: Country
  updatedFields?: String[]
  previousValues?: CountryPreviousValues
}

/*
 * An edge in a connection.

 */
export interface ArticleEdge {
  node: Article
  cursor: String
}

export interface CountryPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  shortName: String
  name: String
}

export interface AggregatePost {
  count: Int
}

export interface Connect extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  to: User
  from: User
  accepted: Boolean
}

/*
 * A connection to a list of items.

 */
export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
  aggregate: AggregatePost
}

export interface InstitutionsSubscriptionPayload {
  mutation: MutationType
  node?: Institutions
  updatedFields?: String[]
  previousValues?: InstitutionsPreviousValues
}

/*
 * An edge in a connection.

 */
export interface FileEdge {
  node: File
  cursor: String
}

export interface InstitutionsPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  type: InstitutionType
}

export interface AggregateDiscussion {
  count: Int
}

export interface DiscussionSubscriptionPayload {
  mutation: MutationType
  node?: Discussion
  updatedFields?: String[]
  previousValues?: DiscussionPreviousValues
}

/*
 * An edge in a connection.

 */
export interface ForumEdge {
  node: Forum
  cursor: String
}

export interface DepartmentSubscriptionPayload {
  mutation: MutationType
  node?: Department
  updatedFields?: String[]
  previousValues?: DepartmentPreviousValues
}

/*
 * A connection to a list of items.

 */
export interface ConnectConnection {
  pageInfo: PageInfo
  edges: ConnectEdge[]
  aggregate: AggregateConnect
}

export interface DepartmentPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

export interface AggregateInterest {
  count: Int
}

export interface Opinions extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  author: User
  discussion: Discussion
}

/*
 * An edge in a connection.

 */
export interface DepartmentEdge {
  node: Department
  cursor: String
}

export interface InterestSubscriptionPayload {
  mutation: MutationType
  node?: Interest
  updatedFields?: String[]
  previousValues?: InterestPreviousValues
}

/*
 * A connection to a list of items.

 */
export interface InstitutionsConnection {
  pageInfo: PageInfo
  edges: InstitutionsEdge[]
  aggregate: AggregateInstitutions
}

export interface InterestPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

export interface AggregateArticle {
  count: Int
}

export interface Post extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  text: String
}

/*
 * An edge in a connection.

 */
export interface PostEdge {
  node: Post
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface UserPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  username?: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type?: String
  userType?: String
  newConnectNot?: Boolean
  newCommentNot?: Boolean
  newMessageNot?: Boolean
  newProfileNot?: Boolean
  completedProfile?: Int
}

export interface AggregateConnect {
  count: Int
}

export interface Discussion extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  slug?: String
  content: String
  tags?: String[]
  favourites?: User[]
  author: User
  private: Boolean
  opinions?: Opinions[]
}

/*
 * A connection to a list of items.

 */
export interface InterestConnection {
  pageInfo: PageInfo
  edges: InterestEdge[]
  aggregate: AggregateInterest
}

export interface ConnectSubscriptionPayload {
  mutation: MutationType
  node?: Connect
  updatedFields?: String[]
  previousValues?: ConnectPreviousValues
}

/*
 * An edge in a connection.

 */
export interface CountryEdge {
  node: Country
  cursor: String
}

export interface AggregateFile {
  count: Int
}

export interface ForumPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  slug?: String
  private: Boolean
}

export interface ForumSubscriptionPayload {
  mutation: MutationType
  node?: Forum
  updatedFields?: String[]
  previousValues?: ForumPreviousValues
}

export interface Interest extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  file: File
  users?: User[]
}

export interface ConnectPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  accepted: Boolean
}

/*
 * A connection to a list of items.

 */
export interface DiscussionConnection {
  pageInfo: PageInfo
  edges: DiscussionEdge[]
  aggregate: AggregateDiscussion
}

/*
 * A connection to a list of items.

 */
export interface ArticleConnection {
  pageInfo: PageInfo
  edges: ArticleEdge[]
  aggregate: AggregateArticle
}

export interface AggregateInstitutions {
  count: Int
}

/*
 * An edge in a connection.

 */
export interface UserEdge {
  node: User
  cursor: String
}

/*
The 'Long' scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
*/
export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export type DateTime = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  files: (args: { where?: FileWhereInput, orderBy?: FileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<File[]>
  posts: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Post[]>
  articles: (args: { where?: ArticleWhereInput, orderBy?: ArticleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Article[]>
  countries: (args: { where?: CountryWhereInput, orderBy?: CountryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Country[]>
  institutionses: (args: { where?: InstitutionsWhereInput, orderBy?: InstitutionsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Institutions[]>
  departments: (args: { where?: DepartmentWhereInput, orderBy?: DepartmentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Department[]>
  interests: (args: { where?: InterestWhereInput, orderBy?: InterestOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Interest[]>
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  connects: (args: { where?: ConnectWhereInput, orderBy?: ConnectOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Connect[]>
  forums: (args: { where?: ForumWhereInput, orderBy?: ForumOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Forum[]>
  discussions: (args: { where?: DiscussionWhereInput, orderBy?: DiscussionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Discussion[]>
  opinionses: (args: { where?: OpinionsWhereInput, orderBy?: OpinionsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Opinions[]>
  file: (args: { where: FileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<File | null>
  post: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  article: (args: { where: ArticleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Article | null>
  country: (args: { where: CountryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Country | null>
  institutions: (args: { where: InstitutionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Institutions | null>
  department: (args: { where: DepartmentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Department | null>
  interest: (args: { where: InterestWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Interest | null>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  connect: (args: { where: ConnectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Connect | null>
  forum: (args: { where: ForumWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Forum | null>
  discussion: (args: { where: DiscussionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Discussion | null>
  opinions: (args: { where: OpinionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Opinions | null>
  filesConnection: (args: { where?: FileWhereInput, orderBy?: FileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FileConnection>
  postsConnection: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PostConnection>
  articlesConnection: (args: { where?: ArticleWhereInput, orderBy?: ArticleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ArticleConnection>
  countriesConnection: (args: { where?: CountryWhereInput, orderBy?: CountryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CountryConnection>
  institutionsesConnection: (args: { where?: InstitutionsWhereInput, orderBy?: InstitutionsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<InstitutionsConnection>
  departmentsConnection: (args: { where?: DepartmentWhereInput, orderBy?: DepartmentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<DepartmentConnection>
  interestsConnection: (args: { where?: InterestWhereInput, orderBy?: InterestOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<InterestConnection>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  connectsConnection: (args: { where?: ConnectWhereInput, orderBy?: ConnectOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ConnectConnection>
  forumsConnection: (args: { where?: ForumWhereInput, orderBy?: ForumOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ForumConnection>
  discussionsConnection: (args: { where?: DiscussionWhereInput, orderBy?: DiscussionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<DiscussionConnection>
  opinionsesConnection: (args: { where?: OpinionsWhereInput, orderBy?: OpinionsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<OpinionsConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createFile: (args: { data: FileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<File>
  createPost: (args: { data: PostCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  createArticle: (args: { data: ArticleCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Article>
  createCountry: (args: { data: CountryCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Country>
  createInstitutions: (args: { data: InstitutionsCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Institutions>
  createDepartment: (args: { data: DepartmentCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Department>
  createInterest: (args: { data: InterestCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Interest>
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createConnect: (args: { data: ConnectCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Connect>
  createForum: (args: { data: ForumCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Forum>
  createDiscussion: (args: { data: DiscussionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Discussion>
  createOpinions: (args: { data: OpinionsCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Opinions>
  updateFile: (args: { data: FileUpdateInput, where: FileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<File | null>
  updatePost: (args: { data: PostUpdateInput, where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  updateArticle: (args: { data: ArticleUpdateInput, where: ArticleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Article | null>
  updateCountry: (args: { data: CountryUpdateInput, where: CountryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Country | null>
  updateInstitutions: (args: { data: InstitutionsUpdateInput, where: InstitutionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Institutions | null>
  updateDepartment: (args: { data: DepartmentUpdateInput, where: DepartmentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Department | null>
  updateInterest: (args: { data: InterestUpdateInput, where: InterestWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Interest | null>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateConnect: (args: { data: ConnectUpdateInput, where: ConnectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Connect | null>
  updateForum: (args: { data: ForumUpdateInput, where: ForumWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Forum | null>
  updateDiscussion: (args: { data: DiscussionUpdateInput, where: DiscussionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Discussion | null>
  updateOpinions: (args: { data: OpinionsUpdateInput, where: OpinionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Opinions | null>
  deleteFile: (args: { where: FileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<File | null>
  deletePost: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  deleteArticle: (args: { where: ArticleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Article | null>
  deleteCountry: (args: { where: CountryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Country | null>
  deleteInstitutions: (args: { where: InstitutionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Institutions | null>
  deleteDepartment: (args: { where: DepartmentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Department | null>
  deleteInterest: (args: { where: InterestWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Interest | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteConnect: (args: { where: ConnectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Connect | null>
  deleteForum: (args: { where: ForumWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Forum | null>
  deleteDiscussion: (args: { where: DiscussionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Discussion | null>
  deleteOpinions: (args: { where: OpinionsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Opinions | null>
  upsertFile: (args: { where: FileWhereUniqueInput, create: FileCreateInput, update: FileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<File>
  upsertPost: (args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  upsertArticle: (args: { where: ArticleWhereUniqueInput, create: ArticleCreateInput, update: ArticleUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Article>
  upsertCountry: (args: { where: CountryWhereUniqueInput, create: CountryCreateInput, update: CountryUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Country>
  upsertInstitutions: (args: { where: InstitutionsWhereUniqueInput, create: InstitutionsCreateInput, update: InstitutionsUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Institutions>
  upsertDepartment: (args: { where: DepartmentWhereUniqueInput, create: DepartmentCreateInput, update: DepartmentUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Department>
  upsertInterest: (args: { where: InterestWhereUniqueInput, create: InterestCreateInput, update: InterestUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Interest>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertConnect: (args: { where: ConnectWhereUniqueInput, create: ConnectCreateInput, update: ConnectUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Connect>
  upsertForum: (args: { where: ForumWhereUniqueInput, create: ForumCreateInput, update: ForumUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Forum>
  upsertDiscussion: (args: { where: DiscussionWhereUniqueInput, create: DiscussionCreateInput, update: DiscussionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Discussion>
  upsertOpinions: (args: { where: OpinionsWhereUniqueInput, create: OpinionsCreateInput, update: OpinionsUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Opinions>
  updateManyFiles: (args: { data: FileUpdateInput, where: FileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPosts: (args: { data: PostUpdateInput, where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyArticles: (args: { data: ArticleUpdateInput, where: ArticleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCountries: (args: { data: CountryUpdateInput, where: CountryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyInstitutionses: (args: { data: InstitutionsUpdateInput, where: InstitutionsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyDepartments: (args: { data: DepartmentUpdateInput, where: DepartmentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyInterests: (args: { data: InterestUpdateInput, where: InterestWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyConnects: (args: { data: ConnectUpdateInput, where: ConnectWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyForums: (args: { data: ForumUpdateInput, where: ForumWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyDiscussions: (args: { data: DiscussionUpdateInput, where: DiscussionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyOpinionses: (args: { data: OpinionsUpdateInput, where: OpinionsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyFiles: (args: { where: FileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPosts: (args: { where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyArticles: (args: { where: ArticleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCountries: (args: { where: CountryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyInstitutionses: (args: { where: InstitutionsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyDepartments: (args: { where: DepartmentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyInterests: (args: { where: InterestWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyConnects: (args: { where: ConnectWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyForums: (args: { where: ForumWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyDiscussions: (args: { where: DiscussionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyOpinionses: (args: { where: OpinionsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  file: (args: { where?: FileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<FileSubscriptionPayload>>
  post: (args: { where?: PostSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PostSubscriptionPayload>>
  article: (args: { where?: ArticleSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ArticleSubscriptionPayload>>
  country: (args: { where?: CountrySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CountrySubscriptionPayload>>
  institutions: (args: { where?: InstitutionsSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<InstitutionsSubscriptionPayload>>
  department: (args: { where?: DepartmentSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<DepartmentSubscriptionPayload>>
  interest: (args: { where?: InterestSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<InterestSubscriptionPayload>>
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  connect: (args: { where?: ConnectSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ConnectSubscriptionPayload>>
  forum: (args: { where?: ForumSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ForumSubscriptionPayload>>
  discussion: (args: { where?: DiscussionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<DiscussionSubscriptionPayload>>
  opinions: (args: { where?: OpinionsSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<OpinionsSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    File: (where: FileWhereInput): Promise<boolean> => super.existsDelegate('query', 'files', { where }, {}, '{ id }'),
    Post: (where: PostWhereInput): Promise<boolean> => super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    Article: (where: ArticleWhereInput): Promise<boolean> => super.existsDelegate('query', 'articles', { where }, {}, '{ id }'),
    Country: (where: CountryWhereInput): Promise<boolean> => super.existsDelegate('query', 'countries', { where }, {}, '{ id }'),
    Institutions: (where: InstitutionsWhereInput): Promise<boolean> => super.existsDelegate('query', 'institutionses', { where }, {}, '{ id }'),
    Department: (where: DepartmentWhereInput): Promise<boolean> => super.existsDelegate('query', 'departments', { where }, {}, '{ id }'),
    Interest: (where: InterestWhereInput): Promise<boolean> => super.existsDelegate('query', 'interests', { where }, {}, '{ id }'),
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Connect: (where: ConnectWhereInput): Promise<boolean> => super.existsDelegate('query', 'connects', { where }, {}, '{ id }'),
    Forum: (where: ForumWhereInput): Promise<boolean> => super.existsDelegate('query', 'forums', { where }, {}, '{ id }'),
    Discussion: (where: DiscussionWhereInput): Promise<boolean> => super.existsDelegate('query', 'discussions', { where }, {}, '{ id }'),
    Opinions: (where: OpinionsWhereInput): Promise<boolean> => super.existsDelegate('query', 'opinionses', { where }, {}, '{ id }')
  }

  query: Query = {
    files: (args, info): Promise<File[]> => super.delegate('query', 'files', args, {}, info),
    posts: (args, info): Promise<Post[]> => super.delegate('query', 'posts', args, {}, info),
    articles: (args, info): Promise<Article[]> => super.delegate('query', 'articles', args, {}, info),
    countries: (args, info): Promise<Country[]> => super.delegate('query', 'countries', args, {}, info),
    institutionses: (args, info): Promise<Institutions[]> => super.delegate('query', 'institutionses', args, {}, info),
    departments: (args, info): Promise<Department[]> => super.delegate('query', 'departments', args, {}, info),
    interests: (args, info): Promise<Interest[]> => super.delegate('query', 'interests', args, {}, info),
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    connects: (args, info): Promise<Connect[]> => super.delegate('query', 'connects', args, {}, info),
    forums: (args, info): Promise<Forum[]> => super.delegate('query', 'forums', args, {}, info),
    discussions: (args, info): Promise<Discussion[]> => super.delegate('query', 'discussions', args, {}, info),
    opinionses: (args, info): Promise<Opinions[]> => super.delegate('query', 'opinionses', args, {}, info),
    file: (args, info): Promise<File | null> => super.delegate('query', 'file', args, {}, info),
    post: (args, info): Promise<Post | null> => super.delegate('query', 'post', args, {}, info),
    article: (args, info): Promise<Article | null> => super.delegate('query', 'article', args, {}, info),
    country: (args, info): Promise<Country | null> => super.delegate('query', 'country', args, {}, info),
    institutions: (args, info): Promise<Institutions | null> => super.delegate('query', 'institutions', args, {}, info),
    department: (args, info): Promise<Department | null> => super.delegate('query', 'department', args, {}, info),
    interest: (args, info): Promise<Interest | null> => super.delegate('query', 'interest', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    connect: (args, info): Promise<Connect | null> => super.delegate('query', 'connect', args, {}, info),
    forum: (args, info): Promise<Forum | null> => super.delegate('query', 'forum', args, {}, info),
    discussion: (args, info): Promise<Discussion | null> => super.delegate('query', 'discussion', args, {}, info),
    opinions: (args, info): Promise<Opinions | null> => super.delegate('query', 'opinions', args, {}, info),
    filesConnection: (args, info): Promise<FileConnection> => super.delegate('query', 'filesConnection', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> => super.delegate('query', 'postsConnection', args, {}, info),
    articlesConnection: (args, info): Promise<ArticleConnection> => super.delegate('query', 'articlesConnection', args, {}, info),
    countriesConnection: (args, info): Promise<CountryConnection> => super.delegate('query', 'countriesConnection', args, {}, info),
    institutionsesConnection: (args, info): Promise<InstitutionsConnection> => super.delegate('query', 'institutionsesConnection', args, {}, info),
    departmentsConnection: (args, info): Promise<DepartmentConnection> => super.delegate('query', 'departmentsConnection', args, {}, info),
    interestsConnection: (args, info): Promise<InterestConnection> => super.delegate('query', 'interestsConnection', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    connectsConnection: (args, info): Promise<ConnectConnection> => super.delegate('query', 'connectsConnection', args, {}, info),
    forumsConnection: (args, info): Promise<ForumConnection> => super.delegate('query', 'forumsConnection', args, {}, info),
    discussionsConnection: (args, info): Promise<DiscussionConnection> => super.delegate('query', 'discussionsConnection', args, {}, info),
    opinionsesConnection: (args, info): Promise<OpinionsConnection> => super.delegate('query', 'opinionsesConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createFile: (args, info): Promise<File> => super.delegate('mutation', 'createFile', args, {}, info),
    createPost: (args, info): Promise<Post> => super.delegate('mutation', 'createPost', args, {}, info),
    createArticle: (args, info): Promise<Article> => super.delegate('mutation', 'createArticle', args, {}, info),
    createCountry: (args, info): Promise<Country> => super.delegate('mutation', 'createCountry', args, {}, info),
    createInstitutions: (args, info): Promise<Institutions> => super.delegate('mutation', 'createInstitutions', args, {}, info),
    createDepartment: (args, info): Promise<Department> => super.delegate('mutation', 'createDepartment', args, {}, info),
    createInterest: (args, info): Promise<Interest> => super.delegate('mutation', 'createInterest', args, {}, info),
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createConnect: (args, info): Promise<Connect> => super.delegate('mutation', 'createConnect', args, {}, info),
    createForum: (args, info): Promise<Forum> => super.delegate('mutation', 'createForum', args, {}, info),
    createDiscussion: (args, info): Promise<Discussion> => super.delegate('mutation', 'createDiscussion', args, {}, info),
    createOpinions: (args, info): Promise<Opinions> => super.delegate('mutation', 'createOpinions', args, {}, info),
    updateFile: (args, info): Promise<File | null> => super.delegate('mutation', 'updateFile', args, {}, info),
    updatePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'updatePost', args, {}, info),
    updateArticle: (args, info): Promise<Article | null> => super.delegate('mutation', 'updateArticle', args, {}, info),
    updateCountry: (args, info): Promise<Country | null> => super.delegate('mutation', 'updateCountry', args, {}, info),
    updateInstitutions: (args, info): Promise<Institutions | null> => super.delegate('mutation', 'updateInstitutions', args, {}, info),
    updateDepartment: (args, info): Promise<Department | null> => super.delegate('mutation', 'updateDepartment', args, {}, info),
    updateInterest: (args, info): Promise<Interest | null> => super.delegate('mutation', 'updateInterest', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateConnect: (args, info): Promise<Connect | null> => super.delegate('mutation', 'updateConnect', args, {}, info),
    updateForum: (args, info): Promise<Forum | null> => super.delegate('mutation', 'updateForum', args, {}, info),
    updateDiscussion: (args, info): Promise<Discussion | null> => super.delegate('mutation', 'updateDiscussion', args, {}, info),
    updateOpinions: (args, info): Promise<Opinions | null> => super.delegate('mutation', 'updateOpinions', args, {}, info),
    deleteFile: (args, info): Promise<File | null> => super.delegate('mutation', 'deleteFile', args, {}, info),
    deletePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'deletePost', args, {}, info),
    deleteArticle: (args, info): Promise<Article | null> => super.delegate('mutation', 'deleteArticle', args, {}, info),
    deleteCountry: (args, info): Promise<Country | null> => super.delegate('mutation', 'deleteCountry', args, {}, info),
    deleteInstitutions: (args, info): Promise<Institutions | null> => super.delegate('mutation', 'deleteInstitutions', args, {}, info),
    deleteDepartment: (args, info): Promise<Department | null> => super.delegate('mutation', 'deleteDepartment', args, {}, info),
    deleteInterest: (args, info): Promise<Interest | null> => super.delegate('mutation', 'deleteInterest', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteConnect: (args, info): Promise<Connect | null> => super.delegate('mutation', 'deleteConnect', args, {}, info),
    deleteForum: (args, info): Promise<Forum | null> => super.delegate('mutation', 'deleteForum', args, {}, info),
    deleteDiscussion: (args, info): Promise<Discussion | null> => super.delegate('mutation', 'deleteDiscussion', args, {}, info),
    deleteOpinions: (args, info): Promise<Opinions | null> => super.delegate('mutation', 'deleteOpinions', args, {}, info),
    upsertFile: (args, info): Promise<File> => super.delegate('mutation', 'upsertFile', args, {}, info),
    upsertPost: (args, info): Promise<Post> => super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertArticle: (args, info): Promise<Article> => super.delegate('mutation', 'upsertArticle', args, {}, info),
    upsertCountry: (args, info): Promise<Country> => super.delegate('mutation', 'upsertCountry', args, {}, info),
    upsertInstitutions: (args, info): Promise<Institutions> => super.delegate('mutation', 'upsertInstitutions', args, {}, info),
    upsertDepartment: (args, info): Promise<Department> => super.delegate('mutation', 'upsertDepartment', args, {}, info),
    upsertInterest: (args, info): Promise<Interest> => super.delegate('mutation', 'upsertInterest', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertConnect: (args, info): Promise<Connect> => super.delegate('mutation', 'upsertConnect', args, {}, info),
    upsertForum: (args, info): Promise<Forum> => super.delegate('mutation', 'upsertForum', args, {}, info),
    upsertDiscussion: (args, info): Promise<Discussion> => super.delegate('mutation', 'upsertDiscussion', args, {}, info),
    upsertOpinions: (args, info): Promise<Opinions> => super.delegate('mutation', 'upsertOpinions', args, {}, info),
    updateManyFiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyFiles', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyArticles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyArticles', args, {}, info),
    updateManyCountries: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCountries', args, {}, info),
    updateManyInstitutionses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyInstitutionses', args, {}, info),
    updateManyDepartments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyDepartments', args, {}, info),
    updateManyInterests: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyInterests', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyConnects: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyConnects', args, {}, info),
    updateManyForums: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyForums', args, {}, info),
    updateManyDiscussions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyDiscussions', args, {}, info),
    updateManyOpinionses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyOpinionses', args, {}, info),
    deleteManyFiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyFiles', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyArticles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyArticles', args, {}, info),
    deleteManyCountries: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCountries', args, {}, info),
    deleteManyInstitutionses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyInstitutionses', args, {}, info),
    deleteManyDepartments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyDepartments', args, {}, info),
    deleteManyInterests: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyInterests', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyConnects: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyConnects', args, {}, info),
    deleteManyForums: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyForums', args, {}, info),
    deleteManyDiscussions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyDiscussions', args, {}, info),
    deleteManyOpinionses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyOpinionses', args, {}, info)
  }

  subscription: Subscription = {
    file: (args, infoOrQuery): Promise<AsyncIterator<FileSubscriptionPayload>> => super.delegateSubscription('file', args, {}, infoOrQuery),
    post: (args, infoOrQuery): Promise<AsyncIterator<PostSubscriptionPayload>> => super.delegateSubscription('post', args, {}, infoOrQuery),
    article: (args, infoOrQuery): Promise<AsyncIterator<ArticleSubscriptionPayload>> => super.delegateSubscription('article', args, {}, infoOrQuery),
    country: (args, infoOrQuery): Promise<AsyncIterator<CountrySubscriptionPayload>> => super.delegateSubscription('country', args, {}, infoOrQuery),
    institutions: (args, infoOrQuery): Promise<AsyncIterator<InstitutionsSubscriptionPayload>> => super.delegateSubscription('institutions', args, {}, infoOrQuery),
    department: (args, infoOrQuery): Promise<AsyncIterator<DepartmentSubscriptionPayload>> => super.delegateSubscription('department', args, {}, infoOrQuery),
    interest: (args, infoOrQuery): Promise<AsyncIterator<InterestSubscriptionPayload>> => super.delegateSubscription('interest', args, {}, infoOrQuery),
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    connect: (args, infoOrQuery): Promise<AsyncIterator<ConnectSubscriptionPayload>> => super.delegateSubscription('connect', args, {}, infoOrQuery),
    forum: (args, infoOrQuery): Promise<AsyncIterator<ForumSubscriptionPayload>> => super.delegateSubscription('forum', args, {}, infoOrQuery),
    discussion: (args, infoOrQuery): Promise<AsyncIterator<DiscussionSubscriptionPayload>> => super.delegateSubscription('discussion', args, {}, infoOrQuery),
    opinions: (args, infoOrQuery): Promise<AsyncIterator<OpinionsSubscriptionPayload>> => super.delegateSubscription('opinions', args, {}, infoOrQuery)
  }
}
{"version":3,"file":"0.9bef410c67ef3f796495.hot-update.js","sources":["webpack:///./src/server.tsx"],"sourcesContent":["import * as express from 'express';\nimport * as React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\n\nimport { getBundles } from 'react-loadable/webpack';\nimport { Capture } from 'react-loadable';\nimport stats from '../build/react-loadable.json';\nimport App from './Containers/App';\nimport 'isomorphic-unfetch';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider, renderToStringWithData } from 'react-apollo';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'node-fetch';\n// import { createPersistedQueryLink } from 'apollo-link-persisted-queries';\nimport {\n  errorLink,\n  httpLink,\n  requestLink,\n  retryLink,\n  stateLink\n} from './link';\n\nconst links = [\n  errorLink,\n  retryLink,\n  stateLink,\n  httpLink\n];\n\nlet assets: any;\n\nconst syncLoadAssets = () => {\n    assets = require(process.env.RAZZLE_ASSETS_MANIFEST!);\n};\nsyncLoadAssets();\n\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR!))\n  .get('/*', (req: express.Request, res: express.Response) => {\n    \n    if (process.env.NODE_ENV === 'production') {\n      // links.unshift(createPersistedQueryLink());\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link: ApolloLink.from(links),\n      cache: new InMemoryCache(),\n    });\n    \n    const context = {} as any;\n    const modules = [] as any;\n    const markup = renderToString(\n      <Capture report={(moduleName) => modules.push(moduleName)}>\n      <ApolloProvider client={client}>\n          <StaticRouter context={context} location={req.url}>\n            <App />\n          </StaticRouter>\n      </ApolloProvider>\n      </Capture>,\n    );\n\n    if (context.url) {\n      res.redirect(context.url);\n    } else {\n      const bundles = getBundles(stats, modules);\n      const chunks = bundles.filter((bundle) => bundle.file.endsWith('.js'));\n      res.send(\n        `<!doctype html>\n      <html lang=\"\">\n      <head>\n          <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n          <meta charSet='utf-8' />\n          <title>Razzle TypeScript</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n          ${\n            assets.client.css\n              ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n              : ''\n          }\n            ${\n              process.env.NODE_ENV === 'production'\n                ? `<script src=\"${assets.client.js}\" defer></script>`\n                : `<script src=\"${assets.client.js}\" defer crossorigin></script>`\n            }\n      </head>\n      <body>\n          <div id=\"root\">${markup}</div>\n      </body>\n  </html>`\n      );\n    }\n  });\n\nexport default server;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader??ref--5!./src/server.tsx"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;AASA;AACA;AACA;AAGA;AACA;AACA;;;AAIA;;AAEA;AAEA;AACA;AAEA;;;;;A","sourceRoot":""}
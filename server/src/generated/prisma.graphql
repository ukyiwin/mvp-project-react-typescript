# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Article implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  body: String!
  type: Arcticletype
  author(where: UserWhereInput): User!
}

type Channels implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  author(where: UserWhereInput): User!
  private: Boolean!
}

type Connect implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to(where: UserWhereInput): User!
  from(where: UserWhereInput): User!
  accepted: Boolean!
}

type Country implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  shortName: String!
  name: String!
  institutions(where: InstitutionsWhereInput, orderBy: InstitutionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institutions!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Department implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  institution(where: InstitutionsWhereInput): Institutions
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Discussion implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  content: String!
  tags: [String!]
  favourites(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  author(where: UserWhereInput): User!
  private: Boolean!
}

type File implements Node {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type Institutions implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  type: InstitutionType!
  country(where: CountryWhereInput): Country
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
}

type Interest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  avatar: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String
  avatar(where: FileWhereInput): File
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  country(where: CountryWhereInput): Country
  institution(where: InstitutionsWhereInput): Institutions
  department(where: DepartmentWhereInput): Department
  interest(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest!]
  favourites(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion!]
  myDiscussions(where: DiscussionWhereInput): Discussion
  connectTo(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect!]
  ConectFrom(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect!]
  type: String
  userType: String
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article!]
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
}


#
# Other Types
#

type AggregateArticle {
  count: Int!
}

type AggregateChannels {
  count: Int!
}

type AggregateConnect {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateDiscussion {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateInstitutions {
  count: Int!
}

type AggregateInterest {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum Arcticletype {
  External
  Internal
}

"""
A connection to a list of items.
"""
type ArticleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateInput {
  isPublished: Boolean
  title: String!
  body: String!
  type: Arcticletype
  author: UserCreateOneWithoutArticlesInput!
}

input ArticleCreateManyWithoutAuthorInput {
  create: [ArticleCreateWithoutAuthorInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  body: String!
  type: Arcticletype
}

"""
An edge in a connection.
"""
type ArticleEdge {
  """
  The item at the end of the edge.
  """
  node: Article!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  type_ASC
  type_DESC
}

type ArticlePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  body: String!
  type: Arcticletype
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArticleSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArticleSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
}

input ArticleUpdateInput {
  isPublished: Boolean
  title: String
  body: String
  type: Arcticletype
  author: UserUpdateOneWithoutArticlesInput
}

input ArticleUpdateManyWithoutAuthorInput {
  create: [ArticleCreateWithoutAuthorInput!]
  connect: [ArticleWhereUniqueInput!]
  disconnect: [ArticleWhereUniqueInput!]
  delete: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ArticleUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ArticleUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  body: String
  type: Arcticletype
}

input ArticleUpdateWithWhereUniqueWithoutAuthorInput {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateWithoutAuthorDataInput!
}

input ArticleUpsertWithWhereUniqueWithoutAuthorInput {
  where: ArticleWhereUniqueInput!
  update: ArticleUpdateWithoutAuthorDataInput!
  create: ArticleCreateWithoutAuthorInput!
}

input ArticleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArticleWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArticleWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  body: String
  """
  All values that are not equal to given value.
  """
  body_not: String
  """
  All values that are contained in given list.
  """
  body_in: [String!]
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
  """
  All values less than the given value.
  """
  body_lt: String
  """
  All values less than or equal the given value.
  """
  body_lte: String
  """
  All values greater than the given value.
  """
  body_gt: String
  """
  All values greater than or equal the given value.
  """
  body_gte: String
  """
  All values containing the given string.
  """
  body_contains: String
  """
  All values not containing the given string.
  """
  body_not_contains: String
  """
  All values starting with the given string.
  """
  body_starts_with: String
  """
  All values not starting with the given string.
  """
  body_not_starts_with: String
  """
  All values ending with the given string.
  """
  body_ends_with: String
  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  type: Arcticletype
  """
  All values that are not equal to given value.
  """
  type_not: Arcticletype
  """
  All values that are contained in given list.
  """
  type_in: [Arcticletype!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [Arcticletype!]
  author: UserWhereInput
}

input ArticleWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ChannelsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ChannelsEdge]!
  aggregate: AggregateChannels!
}

input ChannelsCreateInput {
  title: String!
  private: Boolean
  author: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ChannelsEdge {
  """
  The item at the end of the edge.
  """
  node: Channels!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ChannelsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  private_ASC
  private_DESC
}

type ChannelsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  private: Boolean!
}

type ChannelsSubscriptionPayload {
  mutation: MutationType!
  node: Channels
  updatedFields: [String!]
  previousValues: ChannelsPreviousValues
}

input ChannelsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChannelsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChannelsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChannelsWhereInput
}

input ChannelsUpdateInput {
  title: String
  private: Boolean
  author: UserUpdateOneInput
}

input ChannelsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChannelsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChannelsWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  private: Boolean
  """
  All values that are not equal to given value.
  """
  private_not: Boolean
  author: UserWhereInput
}

input ChannelsWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type ConnectConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ConnectEdge]!
  aggregate: AggregateConnect!
}

input ConnectCreateInput {
  accepted: Boolean
  to: UserCreateOneWithoutConnectToInput!
  from: UserCreateOneWithoutConectFromInput!
}

input ConnectCreateManyWithoutFromInput {
  create: [ConnectCreateWithoutFromInput!]
  connect: [ConnectWhereUniqueInput!]
}

input ConnectCreateManyWithoutToInput {
  create: [ConnectCreateWithoutToInput!]
  connect: [ConnectWhereUniqueInput!]
}

input ConnectCreateWithoutFromInput {
  accepted: Boolean
  to: UserCreateOneWithoutConnectToInput!
}

input ConnectCreateWithoutToInput {
  accepted: Boolean
  from: UserCreateOneWithoutConectFromInput!
}

"""
An edge in a connection.
"""
type ConnectEdge {
  """
  The item at the end of the edge.
  """
  node: Connect!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ConnectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  accepted_ASC
  accepted_DESC
}

type ConnectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  accepted: Boolean!
}

type ConnectSubscriptionPayload {
  mutation: MutationType!
  node: Connect
  updatedFields: [String!]
  previousValues: ConnectPreviousValues
}

input ConnectSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConnectSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConnectSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConnectWhereInput
}

input ConnectUpdateInput {
  accepted: Boolean
  to: UserUpdateOneWithoutConnectToInput
  from: UserUpdateOneWithoutConectFromInput
}

input ConnectUpdateManyWithoutFromInput {
  create: [ConnectCreateWithoutFromInput!]
  connect: [ConnectWhereUniqueInput!]
  disconnect: [ConnectWhereUniqueInput!]
  delete: [ConnectWhereUniqueInput!]
  update: [ConnectUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [ConnectUpsertWithWhereUniqueWithoutFromInput!]
}

input ConnectUpdateManyWithoutToInput {
  create: [ConnectCreateWithoutToInput!]
  connect: [ConnectWhereUniqueInput!]
  disconnect: [ConnectWhereUniqueInput!]
  delete: [ConnectWhereUniqueInput!]
  update: [ConnectUpdateWithWhereUniqueWithoutToInput!]
  upsert: [ConnectUpsertWithWhereUniqueWithoutToInput!]
}

input ConnectUpdateWithoutFromDataInput {
  accepted: Boolean
  to: UserUpdateOneWithoutConnectToInput
}

input ConnectUpdateWithoutToDataInput {
  accepted: Boolean
  from: UserUpdateOneWithoutConectFromInput
}

input ConnectUpdateWithWhereUniqueWithoutFromInput {
  where: ConnectWhereUniqueInput!
  data: ConnectUpdateWithoutFromDataInput!
}

input ConnectUpdateWithWhereUniqueWithoutToInput {
  where: ConnectWhereUniqueInput!
  data: ConnectUpdateWithoutToDataInput!
}

input ConnectUpsertWithWhereUniqueWithoutFromInput {
  where: ConnectWhereUniqueInput!
  update: ConnectUpdateWithoutFromDataInput!
  create: ConnectCreateWithoutFromInput!
}

input ConnectUpsertWithWhereUniqueWithoutToInput {
  where: ConnectWhereUniqueInput!
  update: ConnectUpdateWithoutToDataInput!
  create: ConnectCreateWithoutToInput!
}

input ConnectWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConnectWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConnectWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  accepted: Boolean
  """
  All values that are not equal to given value.
  """
  accepted_not: Boolean
  to: UserWhereInput
  from: UserWhereInput
}

input ConnectWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type CountryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  shortName: String!
  name: String!
  institutions: InstitutionsCreateManyWithoutCountryInput
  users: UserCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutInstitutionsInput {
  create: CountryCreateWithoutInstitutionsInput
  connect: CountryWhereUniqueInput
}

input CountryCreateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutInstitutionsInput {
  shortName: String!
  name: String!
  users: UserCreateManyWithoutCountryInput
}

input CountryCreateWithoutUsersInput {
  shortName: String!
  name: String!
  institutions: InstitutionsCreateManyWithoutCountryInput
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  shortName_ASC
  shortName_DESC
  name_ASC
  name_DESC
}

type CountryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  shortName: String!
  name: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountrySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountrySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateInput {
  shortName: String
  name: String
  institutions: InstitutionsUpdateManyWithoutCountryInput
  users: UserUpdateManyWithoutCountryInput
}

input CountryUpdateOneWithoutInstitutionsInput {
  create: CountryCreateWithoutInstitutionsInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateWithoutInstitutionsDataInput
  upsert: CountryUpsertWithoutInstitutionsInput
}

input CountryUpdateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateWithoutUsersDataInput
  upsert: CountryUpsertWithoutUsersInput
}

input CountryUpdateWithoutInstitutionsDataInput {
  shortName: String
  name: String
  users: UserUpdateManyWithoutCountryInput
}

input CountryUpdateWithoutUsersDataInput {
  shortName: String
  name: String
  institutions: InstitutionsUpdateManyWithoutCountryInput
}

input CountryUpsertWithoutInstitutionsInput {
  update: CountryUpdateWithoutInstitutionsDataInput!
  create: CountryCreateWithoutInstitutionsInput!
}

input CountryUpsertWithoutUsersInput {
  update: CountryUpdateWithoutUsersDataInput!
  create: CountryCreateWithoutUsersInput!
}

input CountryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountryWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountryWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  shortName: String
  """
  All values that are not equal to given value.
  """
  shortName_not: String
  """
  All values that are contained in given list.
  """
  shortName_in: [String!]
  """
  All values that are not contained in given list.
  """
  shortName_not_in: [String!]
  """
  All values less than the given value.
  """
  shortName_lt: String
  """
  All values less than or equal the given value.
  """
  shortName_lte: String
  """
  All values greater than the given value.
  """
  shortName_gt: String
  """
  All values greater than or equal the given value.
  """
  shortName_gte: String
  """
  All values containing the given string.
  """
  shortName_contains: String
  """
  All values not containing the given string.
  """
  shortName_not_contains: String
  """
  All values starting with the given string.
  """
  shortName_starts_with: String
  """
  All values not starting with the given string.
  """
  shortName_not_starts_with: String
  """
  All values ending with the given string.
  """
  shortName_ends_with: String
  """
  All values not ending with the given string.
  """
  shortName_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  institutions_every: InstitutionsWhereInput
  institutions_some: InstitutionsWhereInput
  institutions_none: InstitutionsWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input CountryWhereUniqueInput {
  id: ID
  shortName: String
  name: String
}

scalar DateTime

"""
A connection to a list of items.
"""
type DepartmentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  name: String!
  institution: InstitutionsCreateOneWithoutDepartmentsInput
  users: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateManyWithoutInstitutionInput {
  create: [DepartmentCreateWithoutInstitutionInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateOneWithoutUsersInput {
  create: DepartmentCreateWithoutUsersInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutInstitutionInput {
  name: String!
  users: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateWithoutUsersInput {
  name: String!
  institution: InstitutionsCreateOneWithoutDepartmentsInput
}

"""
An edge in a connection.
"""
type DepartmentEdge {
  """
  The item at the end of the edge.
  """
  node: Department!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DepartmentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DepartmentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
}

input DepartmentUpdateInput {
  name: String
  institution: InstitutionsUpdateOneWithoutDepartmentsInput
  users: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyWithoutInstitutionInput {
  create: [DepartmentCreateWithoutInstitutionInput!]
  connect: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  delete: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutInstitutionInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input DepartmentUpdateOneWithoutUsersInput {
  create: DepartmentCreateWithoutUsersInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DepartmentUpdateWithoutUsersDataInput
  upsert: DepartmentUpsertWithoutUsersInput
}

input DepartmentUpdateWithoutInstitutionDataInput {
  name: String
  users: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateWithoutUsersDataInput {
  name: String
  institution: InstitutionsUpdateOneWithoutDepartmentsInput
}

input DepartmentUpdateWithWhereUniqueWithoutInstitutionInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutInstitutionDataInput!
}

input DepartmentUpsertWithoutUsersInput {
  update: DepartmentUpdateWithoutUsersDataInput!
  create: DepartmentCreateWithoutUsersInput!
}

input DepartmentUpsertWithWhereUniqueWithoutInstitutionInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutInstitutionDataInput!
  create: DepartmentCreateWithoutInstitutionInput!
}

input DepartmentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DepartmentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DepartmentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  institution: InstitutionsWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type DiscussionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DiscussionEdge]!
  aggregate: AggregateDiscussion!
}

input DiscussionCreateInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  favourites: UserCreateManyWithoutFavouritesInput
  author: UserCreateOneWithoutMyDiscussionsInput!
}

input DiscussionCreateManyWithoutFavouritesInput {
  create: [DiscussionCreateWithoutFavouritesInput!]
  connect: [DiscussionWhereUniqueInput!]
}

input DiscussionCreateOneWithoutAuthorInput {
  create: DiscussionCreateWithoutAuthorInput
  connect: DiscussionWhereUniqueInput
}

input DiscussionCreatetagsInput {
  set: [String!]
}

input DiscussionCreateWithoutAuthorInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  favourites: UserCreateManyWithoutFavouritesInput
}

input DiscussionCreateWithoutFavouritesInput {
  title: String!
  slug: String
  content: String!
  private: Boolean
  tags: DiscussionCreatetagsInput
  author: UserCreateOneWithoutMyDiscussionsInput!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  The item at the end of the edge.
  """
  node: Discussion!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DiscussionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  private_ASC
  private_DESC
}

type DiscussionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String
  content: String!
  tags: [String!]
  private: Boolean!
}

type DiscussionSubscriptionPayload {
  mutation: MutationType!
  node: Discussion
  updatedFields: [String!]
  previousValues: DiscussionPreviousValues
}

input DiscussionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DiscussionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DiscussionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscussionWhereInput
}

input DiscussionUpdateInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  favourites: UserUpdateManyWithoutFavouritesInput
  author: UserUpdateOneWithoutMyDiscussionsInput
}

input DiscussionUpdateManyWithoutFavouritesInput {
  create: [DiscussionCreateWithoutFavouritesInput!]
  connect: [DiscussionWhereUniqueInput!]
  disconnect: [DiscussionWhereUniqueInput!]
  delete: [DiscussionWhereUniqueInput!]
  update: [DiscussionUpdateWithWhereUniqueWithoutFavouritesInput!]
  upsert: [DiscussionUpsertWithWhereUniqueWithoutFavouritesInput!]
}

input DiscussionUpdateOneWithoutAuthorInput {
  create: DiscussionCreateWithoutAuthorInput
  connect: DiscussionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DiscussionUpdateWithoutAuthorDataInput
  upsert: DiscussionUpsertWithoutAuthorInput
}

input DiscussionUpdatetagsInput {
  set: [String!]
}

input DiscussionUpdateWithoutAuthorDataInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  favourites: UserUpdateManyWithoutFavouritesInput
}

input DiscussionUpdateWithoutFavouritesDataInput {
  title: String
  slug: String
  content: String
  private: Boolean
  tags: DiscussionUpdatetagsInput
  author: UserUpdateOneWithoutMyDiscussionsInput
}

input DiscussionUpdateWithWhereUniqueWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutFavouritesDataInput!
}

input DiscussionUpsertWithoutAuthorInput {
  update: DiscussionUpdateWithoutAuthorDataInput!
  create: DiscussionCreateWithoutAuthorInput!
}

input DiscussionUpsertWithWhereUniqueWithoutFavouritesInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutFavouritesDataInput!
  create: DiscussionCreateWithoutFavouritesInput!
}

input DiscussionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DiscussionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DiscussionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  slug: String
  """
  All values that are not equal to given value.
  """
  slug_not: String
  """
  All values that are contained in given list.
  """
  slug_in: [String!]
  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]
  """
  All values less than the given value.
  """
  slug_lt: String
  """
  All values less than or equal the given value.
  """
  slug_lte: String
  """
  All values greater than the given value.
  """
  slug_gt: String
  """
  All values greater than or equal the given value.
  """
  slug_gte: String
  """
  All values containing the given string.
  """
  slug_contains: String
  """
  All values not containing the given string.
  """
  slug_not_contains: String
  """
  All values starting with the given string.
  """
  slug_starts_with: String
  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String
  """
  All values ending with the given string.
  """
  slug_ends_with: String
  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  private: Boolean
  """
  All values that are not equal to given value.
  """
  private_not: Boolean
  favourites_every: UserWhereInput
  favourites_some: UserWhereInput
  favourites_none: UserWhereInput
  author: UserWhereInput
}

input DiscussionWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  url: String!
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
}

input FileUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  size: Int
  """
  All values that are not equal to given value.
  """
  size_not: Int
  """
  All values that are contained in given list.
  """
  size_in: [Int!]
  """
  All values that are not contained in given list.
  """
  size_not_in: [Int!]
  """
  All values less than the given value.
  """
  size_lt: Int
  """
  All values less than or equal the given value.
  """
  size_lte: Int
  """
  All values greater than the given value.
  """
  size_gt: Int
  """
  All values greater than or equal the given value.
  """
  size_gte: Int
  secret: String
  """
  All values that are not equal to given value.
  """
  secret_not: String
  """
  All values that are contained in given list.
  """
  secret_in: [String!]
  """
  All values that are not contained in given list.
  """
  secret_not_in: [String!]
  """
  All values less than the given value.
  """
  secret_lt: String
  """
  All values less than or equal the given value.
  """
  secret_lte: String
  """
  All values greater than the given value.
  """
  secret_gt: String
  """
  All values greater than or equal the given value.
  """
  secret_gte: String
  """
  All values containing the given string.
  """
  secret_contains: String
  """
  All values not containing the given string.
  """
  secret_not_contains: String
  """
  All values starting with the given string.
  """
  secret_starts_with: String
  """
  All values not starting with the given string.
  """
  secret_not_starts_with: String
  """
  All values ending with the given string.
  """
  secret_ends_with: String
  """
  All values not ending with the given string.
  """
  secret_not_ends_with: String
  contentType: String
  """
  All values that are not equal to given value.
  """
  contentType_not: String
  """
  All values that are contained in given list.
  """
  contentType_in: [String!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [String!]
  """
  All values less than the given value.
  """
  contentType_lt: String
  """
  All values less than or equal the given value.
  """
  contentType_lte: String
  """
  All values greater than the given value.
  """
  contentType_gt: String
  """
  All values greater than or equal the given value.
  """
  contentType_gte: String
  """
  All values containing the given string.
  """
  contentType_contains: String
  """
  All values not containing the given string.
  """
  contentType_not_contains: String
  """
  All values starting with the given string.
  """
  contentType_starts_with: String
  """
  All values not starting with the given string.
  """
  contentType_not_starts_with: String
  """
  All values ending with the given string.
  """
  contentType_ends_with: String
  """
  All values not ending with the given string.
  """
  contentType_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

"""
A connection to a list of items.
"""
type InstitutionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [InstitutionsEdge]!
  aggregate: AggregateInstitutions!
}

input InstitutionsCreateInput {
  title: String!
  type: InstitutionType!
  country: CountryCreateOneWithoutInstitutionsInput
  users: UserCreateManyWithoutInstitutionInput
  departments: DepartmentCreateManyWithoutInstitutionInput
}

input InstitutionsCreateManyWithoutCountryInput {
  create: [InstitutionsCreateWithoutCountryInput!]
  connect: [InstitutionsWhereUniqueInput!]
}

input InstitutionsCreateOneWithoutDepartmentsInput {
  create: InstitutionsCreateWithoutDepartmentsInput
  connect: InstitutionsWhereUniqueInput
}

input InstitutionsCreateOneWithoutUsersInput {
  create: InstitutionsCreateWithoutUsersInput
  connect: InstitutionsWhereUniqueInput
}

input InstitutionsCreateWithoutCountryInput {
  title: String!
  type: InstitutionType!
  users: UserCreateManyWithoutInstitutionInput
  departments: DepartmentCreateManyWithoutInstitutionInput
}

input InstitutionsCreateWithoutDepartmentsInput {
  title: String!
  type: InstitutionType!
  country: CountryCreateOneWithoutInstitutionsInput
  users: UserCreateManyWithoutInstitutionInput
}

input InstitutionsCreateWithoutUsersInput {
  title: String!
  type: InstitutionType!
  country: CountryCreateOneWithoutInstitutionsInput
  departments: DepartmentCreateManyWithoutInstitutionInput
}

"""
An edge in a connection.
"""
type InstitutionsEdge {
  """
  The item at the end of the edge.
  """
  node: Institutions!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum InstitutionsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
}

type InstitutionsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  type: InstitutionType!
}

type InstitutionsSubscriptionPayload {
  mutation: MutationType!
  node: Institutions
  updatedFields: [String!]
  previousValues: InstitutionsPreviousValues
}

input InstitutionsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InstitutionsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InstitutionsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstitutionsWhereInput
}

input InstitutionsUpdateInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneWithoutInstitutionsInput
  users: UserUpdateManyWithoutInstitutionInput
  departments: DepartmentUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateManyWithoutCountryInput {
  create: [InstitutionsCreateWithoutCountryInput!]
  connect: [InstitutionsWhereUniqueInput!]
  disconnect: [InstitutionsWhereUniqueInput!]
  delete: [InstitutionsWhereUniqueInput!]
  update: [InstitutionsUpdateWithWhereUniqueWithoutCountryInput!]
  upsert: [InstitutionsUpsertWithWhereUniqueWithoutCountryInput!]
}

input InstitutionsUpdateOneWithoutDepartmentsInput {
  create: InstitutionsCreateWithoutDepartmentsInput
  connect: InstitutionsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InstitutionsUpdateWithoutDepartmentsDataInput
  upsert: InstitutionsUpsertWithoutDepartmentsInput
}

input InstitutionsUpdateOneWithoutUsersInput {
  create: InstitutionsCreateWithoutUsersInput
  connect: InstitutionsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InstitutionsUpdateWithoutUsersDataInput
  upsert: InstitutionsUpsertWithoutUsersInput
}

input InstitutionsUpdateWithoutCountryDataInput {
  title: String
  type: InstitutionType
  users: UserUpdateManyWithoutInstitutionInput
  departments: DepartmentUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateWithoutDepartmentsDataInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneWithoutInstitutionsInput
  users: UserUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateWithoutUsersDataInput {
  title: String
  type: InstitutionType
  country: CountryUpdateOneWithoutInstitutionsInput
  departments: DepartmentUpdateManyWithoutInstitutionInput
}

input InstitutionsUpdateWithWhereUniqueWithoutCountryInput {
  where: InstitutionsWhereUniqueInput!
  data: InstitutionsUpdateWithoutCountryDataInput!
}

input InstitutionsUpsertWithoutDepartmentsInput {
  update: InstitutionsUpdateWithoutDepartmentsDataInput!
  create: InstitutionsCreateWithoutDepartmentsInput!
}

input InstitutionsUpsertWithoutUsersInput {
  update: InstitutionsUpdateWithoutUsersDataInput!
  create: InstitutionsCreateWithoutUsersInput!
}

input InstitutionsUpsertWithWhereUniqueWithoutCountryInput {
  where: InstitutionsWhereUniqueInput!
  update: InstitutionsUpdateWithoutCountryDataInput!
  create: InstitutionsCreateWithoutCountryInput!
}

input InstitutionsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InstitutionsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InstitutionsWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  type: InstitutionType
  """
  All values that are not equal to given value.
  """
  type_not: InstitutionType
  """
  All values that are contained in given list.
  """
  type_in: [InstitutionType!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [InstitutionType!]
  country: CountryWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  departments_every: DepartmentWhereInput
  departments_some: DepartmentWhereInput
  departments_none: DepartmentWhereInput
}

input InstitutionsWhereUniqueInput {
  id: ID
}

enum InstitutionType {
  University
  College
}

"""
A connection to a list of items.
"""
type InterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [InterestEdge]!
  aggregate: AggregateInterest!
}

input InterestCreateInput {
  name: String!
  avatar: String!
  users: UserCreateManyWithoutInterestInput
}

input InterestCreateManyWithoutUsersInput {
  create: [InterestCreateWithoutUsersInput!]
  connect: [InterestWhereUniqueInput!]
}

input InterestCreateWithoutUsersInput {
  name: String!
  avatar: String!
}

"""
An edge in a connection.
"""
type InterestEdge {
  """
  The item at the end of the edge.
  """
  node: Interest!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum InterestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
}

type InterestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  avatar: String!
}

type InterestSubscriptionPayload {
  mutation: MutationType!
  node: Interest
  updatedFields: [String!]
  previousValues: InterestPreviousValues
}

input InterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InterestSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterestWhereInput
}

input InterestUpdateInput {
  name: String
  avatar: String
  users: UserUpdateManyWithoutInterestInput
}

input InterestUpdateManyWithoutUsersInput {
  create: [InterestCreateWithoutUsersInput!]
  connect: [InterestWhereUniqueInput!]
  disconnect: [InterestWhereUniqueInput!]
  delete: [InterestWhereUniqueInput!]
  update: [InterestUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [InterestUpsertWithWhereUniqueWithoutUsersInput!]
}

input InterestUpdateWithoutUsersDataInput {
  name: String
  avatar: String
}

input InterestUpdateWithWhereUniqueWithoutUsersInput {
  where: InterestWhereUniqueInput!
  data: InterestUpdateWithoutUsersDataInput!
}

input InterestUpsertWithWhereUniqueWithoutUsersInput {
  where: InterestWhereUniqueInput!
  update: InterestUpdateWithoutUsersDataInput!
  create: InterestCreateWithoutUsersInput!
}

input InterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [InterestWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  avatar: String
  """
  All values that are not equal to given value.
  """
  avatar_not: String
  """
  All values that are contained in given list.
  """
  avatar_in: [String!]
  """
  All values that are not contained in given list.
  """
  avatar_not_in: [String!]
  """
  All values less than the given value.
  """
  avatar_lt: String
  """
  All values less than or equal the given value.
  """
  avatar_lte: String
  """
  All values greater than the given value.
  """
  avatar_gt: String
  """
  All values greater than or equal the given value.
  """
  avatar_gte: String
  """
  All values containing the given string.
  """
  avatar_contains: String
  """
  All values not containing the given string.
  """
  avatar_not_contains: String
  """
  All values starting with the given string.
  """
  avatar_starts_with: String
  """
  All values not starting with the given string.
  """
  avatar_not_starts_with: String
  """
  All values ending with the given string.
  """
  avatar_ends_with: String
  """
  All values not ending with the given string.
  """
  avatar_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input InterestWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFile(data: FileCreateInput!): File!
  createPost(data: PostCreateInput!): Post!
  createArticle(data: ArticleCreateInput!): Article!
  createCountry(data: CountryCreateInput!): Country!
  createInstitutions(data: InstitutionsCreateInput!): Institutions!
  createDepartment(data: DepartmentCreateInput!): Department!
  createInterest(data: InterestCreateInput!): Interest!
  createUser(data: UserCreateInput!): User!
  createConnect(data: ConnectCreateInput!): Connect!
  createChannels(data: ChannelsCreateInput!): Channels!
  createDiscussion(data: DiscussionCreateInput!): Discussion!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateInstitutions(data: InstitutionsUpdateInput!, where: InstitutionsWhereUniqueInput!): Institutions
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateInterest(data: InterestUpdateInput!, where: InterestWhereUniqueInput!): Interest
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateConnect(data: ConnectUpdateInput!, where: ConnectWhereUniqueInput!): Connect
  updateChannels(data: ChannelsUpdateInput!, where: ChannelsWhereUniqueInput!): Channels
  updateDiscussion(data: DiscussionUpdateInput!, where: DiscussionWhereUniqueInput!): Discussion
  deleteFile(where: FileWhereUniqueInput!): File
  deletePost(where: PostWhereUniqueInput!): Post
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteInstitutions(where: InstitutionsWhereUniqueInput!): Institutions
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteInterest(where: InterestWhereUniqueInput!): Interest
  deleteUser(where: UserWhereUniqueInput!): User
  deleteConnect(where: ConnectWhereUniqueInput!): Connect
  deleteChannels(where: ChannelsWhereUniqueInput!): Channels
  deleteDiscussion(where: DiscussionWhereUniqueInput!): Discussion
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertInstitutions(where: InstitutionsWhereUniqueInput!, create: InstitutionsCreateInput!, update: InstitutionsUpdateInput!): Institutions!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  upsertInterest(where: InterestWhereUniqueInput!, create: InterestCreateInput!, update: InterestUpdateInput!): Interest!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertConnect(where: ConnectWhereUniqueInput!, create: ConnectCreateInput!, update: ConnectUpdateInput!): Connect!
  upsertChannels(where: ChannelsWhereUniqueInput!, create: ChannelsCreateInput!, update: ChannelsUpdateInput!): Channels!
  upsertDiscussion(where: DiscussionWhereUniqueInput!, create: DiscussionCreateInput!, update: DiscussionUpdateInput!): Discussion!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyArticles(data: ArticleUpdateInput!, where: ArticleWhereInput!): BatchPayload!
  updateManyCountries(data: CountryUpdateInput!, where: CountryWhereInput!): BatchPayload!
  updateManyInstitutionses(data: InstitutionsUpdateInput!, where: InstitutionsWhereInput!): BatchPayload!
  updateManyDepartments(data: DepartmentUpdateInput!, where: DepartmentWhereInput!): BatchPayload!
  updateManyInterests(data: InterestUpdateInput!, where: InterestWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyConnects(data: ConnectUpdateInput!, where: ConnectWhereInput!): BatchPayload!
  updateManyChannelses(data: ChannelsUpdateInput!, where: ChannelsWhereInput!): BatchPayload!
  updateManyDiscussions(data: DiscussionUpdateInput!, where: DiscussionWhereInput!): BatchPayload!
  deleteManyFiles(where: FileWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyArticles(where: ArticleWhereInput!): BatchPayload!
  deleteManyCountries(where: CountryWhereInput!): BatchPayload!
  deleteManyInstitutionses(where: InstitutionsWhereInput!): BatchPayload!
  deleteManyDepartments(where: DepartmentWhereInput!): BatchPayload!
  deleteManyInterests(where: InterestWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyConnects(where: ConnectWhereInput!): BatchPayload!
  deleteManyChannelses(where: ChannelsWhereInput!): BatchPayload!
  deleteManyDiscussions(where: DiscussionWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  institutionses(where: InstitutionsWhereInput, orderBy: InstitutionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institutions]!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  connects(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connect]!
  channelses(where: ChannelsWhereInput, orderBy: ChannelsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channels]!
  discussions(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion]!
  file(where: FileWhereUniqueInput!): File
  post(where: PostWhereUniqueInput!): Post
  article(where: ArticleWhereUniqueInput!): Article
  country(where: CountryWhereUniqueInput!): Country
  institutions(where: InstitutionsWhereUniqueInput!): Institutions
  department(where: DepartmentWhereUniqueInput!): Department
  interest(where: InterestWhereUniqueInput!): Interest
  user(where: UserWhereUniqueInput!): User
  connect(where: ConnectWhereUniqueInput!): Connect
  channels(where: ChannelsWhereUniqueInput!): Channels
  discussion(where: DiscussionWhereUniqueInput!): Discussion
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  institutionsesConnection(where: InstitutionsWhereInput, orderBy: InstitutionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstitutionsConnection!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  interestsConnection(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterestConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  connectsConnection(where: ConnectWhereInput, orderBy: ConnectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConnectConnection!
  channelsesConnection(where: ChannelsWhereInput, orderBy: ChannelsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelsConnection!
  discussionsConnection(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussionConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  institutions(where: InstitutionsSubscriptionWhereInput): InstitutionsSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  interest(where: InterestSubscriptionWhereInput): InterestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  connect(where: ConnectSubscriptionWhereInput): ConnectSubscriptionPayload
  channels(where: ChannelsSubscriptionWhereInput): ChannelsSubscriptionPayload
  discussion(where: DiscussionSubscriptionWhereInput): DiscussionSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutCountryInput {
  create: [UserCreateWithoutCountryInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFavouritesInput {
  create: [UserCreateWithoutFavouritesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInterestInput {
  create: [UserCreateWithoutInterestInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConectFromInput {
  create: UserCreateWithoutConectFromInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConnectToInput {
  create: UserCreateWithoutConnectToInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyDiscussionsInput {
  create: UserCreateWithoutMyDiscussionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutArticlesInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
}

input UserCreateWithoutConectFromInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutConnectToInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutCountryInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutDepartmentInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutFavouritesInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutInstitutionInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutInterestInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  myDiscussions: DiscussionCreateOneWithoutAuthorInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

input UserCreateWithoutMyDiscussionsInput {
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileCreateOneInput
  country: CountryCreateOneWithoutUsersInput
  institution: InstitutionsCreateOneWithoutUsersInput
  department: DepartmentCreateOneWithoutUsersInput
  interest: InterestCreateManyWithoutUsersInput
  favourites: DiscussionCreateManyWithoutFavouritesInput
  connectTo: ConnectCreateManyWithoutToInput
  ConectFrom: ConnectCreateManyWithoutFromInput
  articles: ArticleCreateManyWithoutAuthorInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  gender_ASC
  gender_DESC
  type_ASC
  type_DESC
  userType_ASC
  userType_DESC
  newConnectNot_ASC
  newConnectNot_DESC
  newCommentNot_ASC
  newCommentNot_DESC
  newMessageNot_ASC
  newMessageNot_DESC
  newProfileNot_ASC
  newProfileNot_DESC
  completedProfile_ASC
  completedProfile_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String
  password: String!
  firstname: String!
  lastname: String!
  gender: String!
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateManyWithoutCountryInput {
  create: [UserCreateWithoutCountryInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCountryInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCountryInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input UserUpdateManyWithoutFavouritesInput {
  create: [UserCreateWithoutFavouritesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavouritesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavouritesInput!]
}

input UserUpdateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInstitutionInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input UserUpdateManyWithoutInterestInput {
  create: [UserCreateWithoutInterestInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInterestInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInterestInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutArticlesDataInput
  upsert: UserUpsertWithoutArticlesInput
}

input UserUpdateOneWithoutConectFromInput {
  create: UserCreateWithoutConectFromInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutConectFromDataInput
  upsert: UserUpsertWithoutConectFromInput
}

input UserUpdateOneWithoutConnectToInput {
  create: UserCreateWithoutConnectToInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutConnectToDataInput
  upsert: UserUpsertWithoutConnectToInput
}

input UserUpdateOneWithoutMyDiscussionsInput {
  create: UserCreateWithoutMyDiscussionsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutMyDiscussionsDataInput
  upsert: UserUpsertWithoutMyDiscussionsInput
}

input UserUpdateWithoutArticlesDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
}

input UserUpdateWithoutConectFromDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutConnectToDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCountryDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutDepartmentDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutFavouritesDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutInstitutionDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutInterestDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  myDiscussions: DiscussionUpdateOneWithoutAuthorInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMyDiscussionsDataInput {
  email: String
  username: String
  password: String
  firstname: String
  lastname: String
  gender: String
  type: String
  userType: String
  newConnectNot: Boolean
  newCommentNot: Boolean
  newMessageNot: Boolean
  newProfileNot: Boolean
  completedProfile: Int
  avatar: FileUpdateOneInput
  country: CountryUpdateOneWithoutUsersInput
  institution: InstitutionsUpdateOneWithoutUsersInput
  department: DepartmentUpdateOneWithoutUsersInput
  interest: InterestUpdateManyWithoutUsersInput
  favourites: DiscussionUpdateManyWithoutFavouritesInput
  connectTo: ConnectUpdateManyWithoutToInput
  ConectFrom: ConnectUpdateManyWithoutFromInput
  articles: ArticleUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutCountryInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCountryDataInput!
}

input UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpdateWithWhereUniqueWithoutFavouritesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavouritesDataInput!
}

input UserUpdateWithWhereUniqueWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInstitutionDataInput!
}

input UserUpdateWithWhereUniqueWithoutInterestInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInterestDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutArticlesInput {
  update: UserUpdateWithoutArticlesDataInput!
  create: UserCreateWithoutArticlesInput!
}

input UserUpsertWithoutConectFromInput {
  update: UserUpdateWithoutConectFromDataInput!
  create: UserCreateWithoutConectFromInput!
}

input UserUpsertWithoutConnectToInput {
  update: UserUpdateWithoutConnectToDataInput!
  create: UserCreateWithoutConnectToInput!
}

input UserUpsertWithoutMyDiscussionsInput {
  update: UserUpdateWithoutMyDiscussionsDataInput!
  create: UserCreateWithoutMyDiscussionsInput!
}

input UserUpsertWithWhereUniqueWithoutCountryInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCountryDataInput!
  create: UserCreateWithoutCountryInput!
}

input UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserUpsertWithWhereUniqueWithoutFavouritesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavouritesDataInput!
  create: UserCreateWithoutFavouritesInput!
}

input UserUpsertWithWhereUniqueWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInstitutionDataInput!
  create: UserCreateWithoutInstitutionInput!
}

input UserUpsertWithWhereUniqueWithoutInterestInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInterestDataInput!
  create: UserCreateWithoutInterestInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  firstname: String
  """
  All values that are not equal to given value.
  """
  firstname_not: String
  """
  All values that are contained in given list.
  """
  firstname_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstname_not_in: [String!]
  """
  All values less than the given value.
  """
  firstname_lt: String
  """
  All values less than or equal the given value.
  """
  firstname_lte: String
  """
  All values greater than the given value.
  """
  firstname_gt: String
  """
  All values greater than or equal the given value.
  """
  firstname_gte: String
  """
  All values containing the given string.
  """
  firstname_contains: String
  """
  All values not containing the given string.
  """
  firstname_not_contains: String
  """
  All values starting with the given string.
  """
  firstname_starts_with: String
  """
  All values not starting with the given string.
  """
  firstname_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstname_ends_with: String
  """
  All values not ending with the given string.
  """
  firstname_not_ends_with: String
  lastname: String
  """
  All values that are not equal to given value.
  """
  lastname_not: String
  """
  All values that are contained in given list.
  """
  lastname_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastname_not_in: [String!]
  """
  All values less than the given value.
  """
  lastname_lt: String
  """
  All values less than or equal the given value.
  """
  lastname_lte: String
  """
  All values greater than the given value.
  """
  lastname_gt: String
  """
  All values greater than or equal the given value.
  """
  lastname_gte: String
  """
  All values containing the given string.
  """
  lastname_contains: String
  """
  All values not containing the given string.
  """
  lastname_not_contains: String
  """
  All values starting with the given string.
  """
  lastname_starts_with: String
  """
  All values not starting with the given string.
  """
  lastname_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastname_ends_with: String
  """
  All values not ending with the given string.
  """
  lastname_not_ends_with: String
  gender: String
  """
  All values that are not equal to given value.
  """
  gender_not: String
  """
  All values that are contained in given list.
  """
  gender_in: [String!]
  """
  All values that are not contained in given list.
  """
  gender_not_in: [String!]
  """
  All values less than the given value.
  """
  gender_lt: String
  """
  All values less than or equal the given value.
  """
  gender_lte: String
  """
  All values greater than the given value.
  """
  gender_gt: String
  """
  All values greater than or equal the given value.
  """
  gender_gte: String
  """
  All values containing the given string.
  """
  gender_contains: String
  """
  All values not containing the given string.
  """
  gender_not_contains: String
  """
  All values starting with the given string.
  """
  gender_starts_with: String
  """
  All values not starting with the given string.
  """
  gender_not_starts_with: String
  """
  All values ending with the given string.
  """
  gender_ends_with: String
  """
  All values not ending with the given string.
  """
  gender_not_ends_with: String
  type: String
  """
  All values that are not equal to given value.
  """
  type_not: String
  """
  All values that are contained in given list.
  """
  type_in: [String!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [String!]
  """
  All values less than the given value.
  """
  type_lt: String
  """
  All values less than or equal the given value.
  """
  type_lte: String
  """
  All values greater than the given value.
  """
  type_gt: String
  """
  All values greater than or equal the given value.
  """
  type_gte: String
  """
  All values containing the given string.
  """
  type_contains: String
  """
  All values not containing the given string.
  """
  type_not_contains: String
  """
  All values starting with the given string.
  """
  type_starts_with: String
  """
  All values not starting with the given string.
  """
  type_not_starts_with: String
  """
  All values ending with the given string.
  """
  type_ends_with: String
  """
  All values not ending with the given string.
  """
  type_not_ends_with: String
  userType: String
  """
  All values that are not equal to given value.
  """
  userType_not: String
  """
  All values that are contained in given list.
  """
  userType_in: [String!]
  """
  All values that are not contained in given list.
  """
  userType_not_in: [String!]
  """
  All values less than the given value.
  """
  userType_lt: String
  """
  All values less than or equal the given value.
  """
  userType_lte: String
  """
  All values greater than the given value.
  """
  userType_gt: String
  """
  All values greater than or equal the given value.
  """
  userType_gte: String
  """
  All values containing the given string.
  """
  userType_contains: String
  """
  All values not containing the given string.
  """
  userType_not_contains: String
  """
  All values starting with the given string.
  """
  userType_starts_with: String
  """
  All values not starting with the given string.
  """
  userType_not_starts_with: String
  """
  All values ending with the given string.
  """
  userType_ends_with: String
  """
  All values not ending with the given string.
  """
  userType_not_ends_with: String
  newConnectNot: Boolean
  """
  All values that are not equal to given value.
  """
  newConnectNot_not: Boolean
  newCommentNot: Boolean
  """
  All values that are not equal to given value.
  """
  newCommentNot_not: Boolean
  newMessageNot: Boolean
  """
  All values that are not equal to given value.
  """
  newMessageNot_not: Boolean
  newProfileNot: Boolean
  """
  All values that are not equal to given value.
  """
  newProfileNot_not: Boolean
  completedProfile: Int
  """
  All values that are not equal to given value.
  """
  completedProfile_not: Int
  """
  All values that are contained in given list.
  """
  completedProfile_in: [Int!]
  """
  All values that are not contained in given list.
  """
  completedProfile_not_in: [Int!]
  """
  All values less than the given value.
  """
  completedProfile_lt: Int
  """
  All values less than or equal the given value.
  """
  completedProfile_lte: Int
  """
  All values greater than the given value.
  """
  completedProfile_gt: Int
  """
  All values greater than or equal the given value.
  """
  completedProfile_gte: Int
  avatar: FileWhereInput
  country: CountryWhereInput
  institution: InstitutionsWhereInput
  department: DepartmentWhereInput
  interest_every: InterestWhereInput
  interest_some: InterestWhereInput
  interest_none: InterestWhereInput
  favourites_every: DiscussionWhereInput
  favourites_some: DiscussionWhereInput
  favourites_none: DiscussionWhereInput
  myDiscussions: DiscussionWhereInput
  connectTo_every: ConnectWhereInput
  connectTo_some: ConnectWhereInput
  connectTo_none: ConnectWhereInput
  ConectFrom_every: ConnectWhereInput
  ConectFrom_some: ConnectWhereInput
  ConectFrom_none: ConnectWhereInput
  articles_every: ArticleWhereInput
  articles_some: ArticleWhereInput
  articles_none: ArticleWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}

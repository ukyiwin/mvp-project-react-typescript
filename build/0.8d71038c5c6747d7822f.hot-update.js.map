{"version":3,"file":"0.8d71038c5c6747d7822f.hot-update.js","sources":["webpack:///./src/Containers/App/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n// import { asyncComponent } from 'react-async-component';\nimport { Helmet } from 'react-helmet';\n// import NotFound from '../NotFound';\nimport { PublicLayout, PrivateLayout } from 'Components/Layouts/MainLayout';\nimport { isTokenExpired } from 'Utils/jwtHelper';\nimport { AUTH_TOKEN } from '../../constants';\nimport { PrivateHeader } from 'Components/Layouts/Header';\nimport LoadingComponent from 'Components/Loading';\nimport SideBar from 'Components/Layouts/SideBar';\nimport { User } from 'CustomTypings/schema';\nimport { ME } from 'Graphql/Query';\nimport { withApollo, graphql, compose, ChildProps } from 'react-apollo';\n// import Profile from '../Profile';\nimport 'Theme/application.css';\nimport './style.scss';\nimport Loadable from 'react-loadable';\n\nconst Home = Loadable({\n  loader: () => import('Containers/Home'),\n  loading: () => <LoadingComponent />,\n});\n\nconst PublicHome = Loadable({\n  loader: () => import('Containers/HomePublic'),\n  loading: () => <LoadingComponent />,\n});\n\ninterface Props {\n    // tslint:disable-next-line:no-any\n    client?: any;\n    // tslint:disable-next-line:no-any\n    history?: any;\n    // tslint:disable-next-line:no-any\n    allInterest: any;\n}\n\ninterface Response {\n    me: User;\n}\n\ninterface State {\n    isAuthenticated: boolean;\n    token: string;\n    expireToken: boolean;\n    me: object;\n    avatar: string;\n}\n\nclass App extends React.Component<Props & ChildProps<Response, {}>, State> {\n    state = {\n        isAuthenticated: false,\n        token: '',\n        expireToken: false,\n        avatar: '',\n        me: {\n            id: '',\n            firstname: '',\n            lastname: '',\n            email: '',\n        },\n    };\n\n    componentWillMount() {\n        /* const token = localStorage.getItem(AUTH_TOKEN);\n        if (token !== null && token !== undefined) {\n            const expired = isTokenExpired(token);\n            if (!expired) {\n                this.setState({ isAuthenticated: true });\n                this.setState({ token });\n                this.setState({ expireToken: expired });\n                this.loadMe();\n            } else {\n                localStorage.removeItem(AUTH_TOKEN);\n                this.setState({ isAuthenticated: false });\n                this.setState({ token: '' });\n                this.setState({ expireToken: false });\n            }\n        }*/\n    }\n\n    componentDidMount() {\n        // this.props.\n        // tslint:disable-next-line:no-console\n        console.log(this.props.me);\n    }\n\n    refreshToken = (token: string) => {\n        this.setState({\n            token,\n        });\n\n        if (token !== '' && token !== undefined) {\n            this.setState({\n                isAuthenticated: true,\n            });\n            // this.loadMe();\n        }\n    }\n\n    _logout = () => {\n        // localStorage.removeItem(AUTH_TOKEN);\n        this.setState({ isAuthenticated: false });\n        this.setState({ token: '' });\n        this.setState({ expireToken: false });\n    }\n\n    loadMe() {\n        this.props.client\n            .query({\n                query: ME,\n            })\n            .then(({ data }) => {\n                // tslint:disable-next-line:no-console\n                console.log(data.me);\n                this.setState({ me: data.me });\n\n                if (data.me.completedProfile === 1) {\n                    this.props.history.replace('/add/profile');\n                } else if (data.me.completedProfile === 2) {\n                    this.props.history.replace('/add/interest');\n                }\n\n                this.setState({ avatar: data.me.avata.url });\n                // tslint:disable-next-line:no-console\n                console.log(this.state.avatar);\n            })\n            .catch((error) => {\n                // localStorage.removeItem(AUTH_TOKEN);\n                if (error) {\n                    // tslint:disable-next-line:no-console\n                    console.log('grooom');\n                    // this.setState({isAuthenticated: false});\n                    this.setState({ token: '' });\n                    this.setState({ expireToken: false });\n                }\n            });\n    }\n\n    render() {\n        const { isAuthenticated } = this.state;\n        // const userAuthed = token ? true : false;\n        // tslint:disable-next-line:no-console\n        console.log(isAuthenticated);\n\n        return (\n            <div className=\"uk-offcanvas-content bg-muted\" style={{ minHeight: '90vh', backgroundColor: '#e4e6eb' }}>\n                <Helmet>\n                    <title>Unizonn Here</title>\n                    <meta name=\"an inclusive community\" content=\"Unizonn community\" />\n                </Helmet>\n                <PrivateHeader avatar={this.state.avatar} isAuthenticated={isAuthenticated} logout={this._logout} />\n                <Switch>\n                    <Route\n                        exact={true}\n                        path=\"/\"\n                        render={() =>\n                            isAuthenticated ? (\n                                <PrivateLayout component={Home} isAuthenticated={isAuthenticated} />\n                            ) : (\n                                <PublicLayout component={PublicHome} isAuthenticated={isAuthenticated} />\n                            )\n                        }\n                        // tslint:disable-next-line:jsx-alignment\n                    />\n                    <PrivateLayout component={Home} path=\"/home\" isAuthenticated={isAuthenticated} />\n                </Switch>\n                <SideBar />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(compose(withApollo, graphql<Response, {}>(ME))(App));\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader??ref--5!./src/Containers/App/index.tsx"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAuBA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAkEA;AA5GA;AACA;;;;;;;;;;;;;;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAEA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;A","sourceRoot":""}
{"version":3,"file":"0.8afdd75e5f787e3512f3.hot-update.js","sources":["webpack:///./src/Containers/App/index.tsx","webpack:///./src/Utils/jwtHelper.ts","webpack:///external \"jwt-decode\""],"sourcesContent":["import * as React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Cookies, CookiesProvider, CookieBannerUniversal } from 'react-cookie-banner';\nimport { Helmet } from 'react-helmet';\nimport { withApollo, graphql, compose, ChildProps } from 'react-apollo';\nimport Loadable from 'react-loadable';\nimport { PublicLayout, PrivateLayout, EmptyLayout, ProfileLayout } from 'Components/Layouts/MainLayout';\nimport { isTokenExpired } from 'Utils/jwtHelper';\nimport { AUTH_TOKEN } from '../../constants';\nimport { PrivateHeader } from 'Components/Layouts/Header';\nimport LoadingComponent from 'Components/Loading';\nimport SideBar from 'Components/Layouts/SideBar';\nimport { User } from 'CustomTypings/schema';\nimport { ME } from 'Graphql/Query';\nimport 'Theme/application.scss';\nimport './style.scss';\n\nconst Home = Loadable({\n  loader: () => import('Containers/Home'),\n  loading: () => <LoadingComponent />,\n});\n\nconst NotFound = Loadable({\n  loader: () => import('Containers/NotFound'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Profile = Loadable({\n  loader: () => import('Containers/Profile'),\n  loading: () => <LoadingComponent />,\n});\n\nconst PublicHome = Loadable({\n  loader: () => import('Containers/HomePublic'),\n  loading: () => <LoadingComponent />,\n});\nconst Login = Loadable({\n  loader: () => import('Containers/Auth/Login'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Signup = Loadable({\n  loader: () => import('Containers/Auth/Signup'),\n  loading: () => <LoadingComponent />,\n});\nconst ArticleDetail = Loadable({\n  loader: () => import('Containers/ArticleDetail'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Interest = Loadable({\n  loader: () => import('Containers/Auth/Signup/interest'),\n  loading: () => <LoadingComponent />,\n});\nconst Maps = Loadable({\n  loader: () => import('Containers/Maps'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Compose = Loadable({\n  loader: () => import('Containers/ComposeArticle'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Message = Loadable({\n  loader: () => import('Containers/Message'),\n  loading: () => <LoadingComponent />,\n});\n\nconst Forum = Loadable({\n  loader: () => import('Containers/Forum'),\n  loading: () => <LoadingComponent />,\n});\n\nconst FinishSignup = Loadable({\n  loader: () => import('Containers/Auth/Signup/finishSignup'),\n  loading: () => <LoadingComponent />,\n});\n\nconst SignupProfile = Loadable({\n  loader: () => import('Containers/Auth/Signup/signupProfile'),\n  loading: () => <LoadingComponent />,\n});\n\ninterface Props {\n    // tslint:disable-next-line:no-any\n    client?: any;\n    // tslint:disable-next-line:no-any\n    history?: any;\n    // tslint:disable-next-line:no-any\n    allInterest: any;\n}\n\ninterface Response {\n    me: User;\n}\n\ninterface State {\n    isAuthenticated: boolean;\n    token: string;\n    expireToken: boolean;\n    me: object;\n    avatar: string;\n}\n\nconst cookies = new Cookies('unizonn');\nclass App extends React.Component<Props & ChildProps<Response, {}>, State> {\n    state = {\n        isAuthenticated: false,\n        token: '',\n        expireToken: false,\n        avatar: '',\n        me: {\n            id: '',\n            firstname: '',\n            lastname: '',\n            email: '',\n        },\n    };\n\n    componentWillMount() {\n        const token = cookies.get(AUTH_TOKEN);\n        /*cookies.set('test', 'a', {\n          expires: new Date(2020-05-04),\n          path: '/api',\n          domain: '*.example.com',\n          secure: true\n        });*/\n        if (token !== null && token !== undefined) {\n            const expired = isTokenExpired(token);\n            if (!expired) {\n                this.setState({ isAuthenticated: true });\n                this.setState({ token });\n                this.setState({ expireToken: expired });\n                this.loadMe();\n            } else {\n                cookies.remove(AUTH_TOKEN, '', -1);\n                this.setState({ isAuthenticated: false });\n                this.setState({ token: '' });\n                this.setState({ expireToken: false });\n            }\n        }\n    }\n\n    componentDidMount() {\n        // this.props.\n        // tslint:disable-next-line:no-console\n        console.log(this.props.me);\n    }\n\n    refreshToken = (token: string) => {\n        this.setState({\n            token,\n        });\n\n        if (token !== '' && token !== undefined) {\n            this.setState({\n                isAuthenticated: true,\n            });\n            // this.loadMe();\n        }\n    }\n\n    _logout = () => {\n        // localStorage.removeItem(AUTH_TOKEN);\n        this.setState({ isAuthenticated: false });\n        this.setState({ token: '' });\n        this.setState({ expireToken: false });\n    }\n\n    loadMe() {\n        this.props.client\n            .query({\n                query: ME,\n            })\n            .then(({ data }) => {\n                // tslint:disable-next-line:no-console\n                console.log(data.me);\n                this.setState({ me: data.me });\n\n                if (data.me.completedProfile === 1) {\n                    this.props.history.replace('/add/profile');\n                } else if (data.me.completedProfile === 2) {\n                    this.props.history.replace('/add/interest');\n                }\n\n                this.setState({ avatar: data.me.avata.url });\n                // tslint:disable-next-line:no-console\n                console.log(this.state.avatar);\n            })\n            .catch((error) => {\n                // localStorage.removeItem(AUTH_TOKEN);\n                if (error) {\n                    // tslint:disable-next-line:no-console\n                    console.log('grooom');\n                    // this.setState({isAuthenticated: false});\n                    this.setState({ token: '' });\n                    this.setState({ expireToken: false });\n                }\n            });\n    }\n\n    render() {\n        const { isAuthenticated } = this.state;\n        // const userAuthed = token ? true : false;\n        // tslint:disable-next-line:no-console\n        console.log(isAuthenticated);\n\n        return (\n            <div className=\"uk-offcanvas-content bg-muted\" style={{ minHeight: '40vh', backgroundColor: '#e4e6eb' }}>\n                <div>\n                <CookiesProvider cookies={cookies}>\n                  <CookieBannerUniversal\n                    message=\"Yes, we use cookies. If you don't like it change website, we won't miss you!\"\n                    // tslint:disable-next-line:no-empty\n                    onAccept={() => {}}\n                    cookie=\"user-has-accepted-cookies\" />\n                </CookiesProvider>\n                </div>\n                <Helmet>\n                    <title>Unizonn</title>\n                    <meta name=\"an inclusive community\" content=\"Unizonn community\" />\n                </Helmet>\n                <PrivateHeader avatar={this.state.avatar} isAuthenticated={isAuthenticated} logout={this._logout} />\n                <Switch>\n                    <Route\n                        exact={true}\n                        path=\"/\"\n                        render={() =>\n                            isAuthenticated ? (\n                                <PrivateLayout component={Home} isAuthenticated={isAuthenticated} />\n                            ) : (\n                                <PublicLayout component={PublicHome} isAuthenticated={isAuthenticated} />\n                            )\n                        }\n                        // tslint:disable-next-line:jsx-alignment\n                    />\n                    <PrivateLayout component={Home} path=\"/home\" isAuthenticated={isAuthenticated} />\n                    <PublicLayout \n                      component={Login}\n                      refreshToken={this.refreshToken}\n                      path=\"/login\"\n                      isAuthenticated={isAuthenticated}  \n                    />\n                    <PublicLayout \n                      component={Login}\n                      exact={true}\n                      refreshToken={this.refreshToken}\n                      path=\"/login/:email\"\n                      isAuthenticated={isAuthenticated}  \n                    />\n                    <PublicLayout \n                      component={Signup}\n                      refreshToken={this.refreshToken}\n                      path=\"/signup\" \n                      isAuthenticated={isAuthenticated}  \n                    />\n                    <PublicLayout \n                      component={Signup}\n                      exact={true}\n                      refreshToken={this.refreshToken}\n                      path=\"/signup/:email\" \n                      isAuthenticated={isAuthenticated}  \n                    />\n                    <EmptyLayout component={FinishSignup} path=\"/signup/complete\" isAuthenticated={isAuthenticated} />\n                    <EmptyLayout \n                      exact={true} \n                      component={SignupProfile} \n                      path=\"/add/profile\" \n                      isAuthenticated={isAuthenticated}\n                    />\n                    <EmptyLayout \n                      path=\"/article/:slug\"\n                      isAuthenticated={isAuthenticated} \n                      component={ArticleDetail}\n                    />\n                    <EmptyLayout component={Interest} path=\"/add/interest\" isAuthenticated={isAuthenticated} />\n                    <EmptyLayout component={Maps} path=\"/library\" isAuthenticated={isAuthenticated} />\n                    <EmptyLayout component={Message} path=\"/message\" isAuthenticated={isAuthenticated} />\n                    <EmptyLayout component={Forum} path=\"/Forum\" isAuthenticated={isAuthenticated} />\n                    <EmptyLayout component={Compose} path=\"/write\" isAuthenticated={isAuthenticated} />\n                    <ProfileLayout component={Profile} path=\"/profile\" isAuthenticated={isAuthenticated}/>\n                    <ProfileLayout component={Profile} path=\"/profile/:id\" isAuthenticated={isAuthenticated}/>\n                    <Route component={NotFound} path=\"*\" />\n                    <PrivateLayout \n                      path=\"/logout\"\n                      isAuthenticated={isAuthenticated} \n                      render={() => this._logout()}  \n                    />\n                </Switch>\n                <SideBar />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(compose(withApollo, graphql<Response, {}>(ME))(App));\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader??ref--5!./src/Containers/App/index.tsx","import decode from 'jwt-decode';\r\n\r\n// tslint:disable-next-line:only-arrow-functions\r\nexport function getTokenExpirationDate(token: string) {\r\n  const decoded = decode(token);\r\n  if (!decoded.exp) {\r\n    return null;\r\n  }\r\n  const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n  date.setUTCSeconds(decoded.exp);\r\n  return date;\r\n}\r\n\r\n// tslint:disable-next-line:only-arrow-functions\r\nexport function isTokenExpired(token: string) {\r\n  const date = getTokenExpirationDate(token);\r\n  const offsetSeconds = 0;\r\n  if (date === null) {\r\n    return false;\r\n  }\r\n  return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\r\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader??ref--5!./src/Utils/jwtHelper.ts","module.exports = require(\"jwt-decode\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jwt-decode\"\n// module id = jwt-decode\n// module chunks = 0"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAuBA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA8HA;AA9KA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AAMA;AAOA;AAMA;AAOA;AACA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AACA;AAEA;;;;;;;;;ACxSA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;;;;A","sourceRoot":""}
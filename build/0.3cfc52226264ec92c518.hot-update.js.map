{"version":3,"file":"0.3cfc52226264ec92c518.hot-update.js","sources":["webpack:///./src/link.ts"],"sourcesContent":["import { ApolloLink } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { onError } from 'apollo-link-error';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { Cookies } from 'react-cookie-banner';\r\n// import { createPersistedQueryLink } from 'apollo-link-persisted-queries';\r\nimport { RetryLink } from 'apollo-link-retry';\r\nimport resolvers from 'Graphql/Resolvers';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { withClientState } from 'apollo-link-state';\r\n\r\nconst AUTH_TOKEN = 'token';\r\nexport const cookies = new Cookies('unizonn');\r\n\r\nexport const errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  /*\r\n  onError receives a callback in the event a GraphQL or network error occurs.\r\n  This example is a bit contrived, but in the real world, you could connect\r\n  a logging service to the errorLink or perform a specific action in response\r\n  to an error.\r\n  */\r\n  // tslint:disable-next-line:curly\r\n  if (graphQLErrors)\r\n    graphQLErrors.map(({ message, location, path }) =>\r\n      console.log(\r\n        `[GraphQL error]: Message: ${message}, Location: ${location}, Path: ${path}`\r\n      )\r\n    );\r\n  // tslint:disable-next-line:curly\r\n  if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nexport const httpLink = new HttpLink({ uri: 'https://uniserver.now.sh' });\r\n\r\nexport const middlewareLink = new ApolloLink((operation: any, forward: any) => {\r\n  // get the authentication token from local storage if it exists\r\n  const authToken = cookies.get(AUTH_TOKEN);\r\n  // return the headers to the context so httpLink can read them\r\n  operation.setContext({\r\n    headers: {\r\n      Authorization: authToken ? `Bearer ${authToken}` : '',\r\n    }\r\n  });\r\n  return forward(operation);\r\n});\r\n\r\nexport const httpLinkAuth = middlewareLink.concat(httpLink);\r\n\r\nexport const subscriptionLink = (config = {}) =>\r\n  new WebSocketLink({\r\n    uri:\r\n      process.env.NODE_ENV !== 'production'\r\n        ? 'ws://uniserver.now.sh'\r\n        : 'wss://uniserver.now.sh',\r\n    options: { reconnect: true },\r\n    ...config,\r\n  });\r\n\r\nexport const queryOrMutationLink = (config = {}) =>\r\n  // turn on CDN support via GET\r\n  // createPersistedQueryLink({ useGETForHashedQueries: true }).concat(\r\n    new HttpLink({\r\n      ...config,\r\n      credentials: 'same-origin',\r\n    });\r\n  // );\r\n\r\nexport const requestLink = ({ queryOrMutationLink, subscriptionLink }) =>\r\n  /*\r\n    This link checks if the operation is a subscription.\r\n    If it is, we use our subscription link to retrieve data over WebSockets.\r\n    If it is a query or mutation, we retrieve data over HTTP.\r\n  */\r\n  ApolloLink.split(\r\n    ({ query }) => {\r\n      const { kind, operation } = getMainDefinition(query);\r\n      return kind === 'OperationDefinition' && operation === 'subscription';\r\n    },\r\n    subscriptionLink,\r\n    queryOrMutationLink\r\n);\r\n\r\nconst defaults = { appState: 'INITIAL' };\r\n\r\nexport const retryLink = new RetryLink();\r\n\r\nexport const cache = new InMemoryCache();\r\n\r\nexport const stateLink = withClientState({\r\n  cache,\r\n  resolvers,\r\n  defaults\r\n});\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader??ref--5!./src/link.ts"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;A","sourceRoot":""}